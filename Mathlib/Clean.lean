import Mathlib

open nonZeroDivisors NumberField

theorem differentIdeal_ne_bot' (A K B L : Type*) [CommRing A] [Field K] [Algebra A K]
    [IsFractionRing A K] [CommRing B] [Field L] [Algebra B L] [IsFractionRing B L]
    [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A B L] [IsScalarTower A K L]
    [IsDomain A] [IsIntegrallyClosed A] [IsDedekindDomain B] [NoZeroSMulDivisors A B]
    [Module.Finite A B] [Algebra.IsSeparable K L] :
    differentIdeal A B ‚â† ‚ä• := by
  have : IsLocalization (Algebra.algebraMapSubmonoid B A‚Å∞) L :=
    IsIntegralClosure.isLocalization _ K _ _
  have : FiniteDimensional K L := Module.Finite_of_isLocalization A B _ _ A‚Å∞
  rw [ne_eq, ‚Üê FractionalIdeal.coeIdeal_inj (K := L), coeIdeal_differentIdeal (K := K)]
  simp

theorem LinearMap.BilinForm.dualBasis_eq_iff {V : Type*} {K : Type*} [Field K] [AddCommGroup V]
    [Module K V] {Œπ : Type*} [DecidableEq Œπ] [Finite Œπ] (B : LinearMap.BilinForm K V)
    (hB : B.Nondegenerate) (b : Basis Œπ K V) (v : Œπ ‚Üí V) :
    B.dualBasis hB b = v ‚Üî ‚àÄ i j, B (v i) (b j) = if j = i then 1 else 0 :=
  ‚ü®fun h _ _ ‚Ü¶ by rw [‚Üê h, apply_dualBasis_left],
    fun h ‚Ü¶ funext fun _ ‚Ü¶ (B.dualBasis hB b).ext_elem_iff.mpr fun _ ‚Ü¶ by
      rw [dualBasis_repr_apply, dualBasis_repr_apply, apply_dualBasis_left, h]‚ü©

/-- Doc -/
noncomputable def Basis.traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    Basis Œπ K L :=
  (Algebra.traceForm K L).dualBasis (traceForm_nondegenerate K L) b

@[simp]
theorem Basis.traceDual_repr_apply {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (x : L) (i : Œπ) :
    (b.traceDual).repr x i = (Algebra.traceForm K L x) (b i) :=
  (Algebra.traceForm K L).dualBasis_repr_apply _ b _ i

theorem Basis.trace_traceDual_mul {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (i j : Œπ) :
    Algebra.trace K L ((b.traceDual i) * (b j)) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).apply_dualBasis_left _ _ i j

theorem Basis.trace_mul_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (i j : Œπ) :
    Algebra.trace K L ((b i) * (b.traceDual j)) = if i = j then 1 else 0 := by
  refine (Algebra.traceForm K L).apply_dualBasis_right _ (Algebra.traceForm_isSymm K) _ i j

@[simp]
theorem Basis.traceDual_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    b.traceDual.traceDual = b :=
  (Algebra.traceForm K L).dualBasis_dualBasis _ (Algebra.traceForm_isSymm K) _

@[simp]
theorem Basis.traceDual_involutive (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Involutive (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  fun b ‚Ü¶ traceDual_traceDual b

theorem Basis.traceDual_injective (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Injective (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  (traceDual_involutive K L).injective

@[simp]
theorem Basis.traceDual_inj {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b b' : Basis Œπ K L):
    b.traceDual = b'.traceDual ‚Üî b = b' :=
  (traceDual_injective K L).eq_iff

theorem Basis.traceDual_eq_iff {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    {b : Basis Œπ K L} {v : Œπ ‚Üí L} :
    b.traceDual = v ‚Üî
      ‚àÄ i j, Algebra.traceForm K L (v i) (b j) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).dualBasis_eq_iff (traceForm_nondegenerate K L) b v

@[simp]
theorem Submodule.traceDual_restrictScalars (A K : Type*) {L B : Type*} [CommRing A] [Field K]
    [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B] [Algebra K L] [Algebra A L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) :
    (Submodule.traceDual A K I).restrictScalars A =
      (Algebra.traceForm K L).dualSubmodule (I.restrictScalars A) := rfl

theorem Submodule.traceDual_span_of_basis (A : Type*) {K L B : Type*}
    [CommRing A] [Field K] [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B]
    [Algebra K L] [Algebra A L] [FiniteDimensional K L] [Algebra.IsSeparable K L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) {Œπ : Type*} [Finite Œπ]
    [DecidableEq Œπ] (b : Basis Œπ K L) (hb : I.restrictScalars A = Submodule.span A (Set.range b)) :
    (Submodule.traceDual A K I).restrictScalars A = Submodule.span A (Set.range b.traceDual) := by
  rw [traceDual_restrictScalars, hb]
  exact (Algebra.traceForm K L).dualSubmodule_span_of_basis (traceForm_nondegenerate K L) b

instance (K : Type*) [Field K] [NumberField K] (F : Type*) [Field F] [NumberField F] [Algebra F K] :
    IsLocalization (Algebra.algebraMapSubmonoid (ùìû K) (ùìû F)‚Å∞) K := by
  refine IsLocalization.of_le (Algebra.algebraMapSubmonoid (ùìû K) ‚Ñ§‚Å∞) _ ?_ ?_
  ¬∑ rintro _ ‚ü®a, ha, rfl‚ü©
    exact ‚ü®a, by simpa using ne_zero ha, by simp‚ü©
  ¬∑ rintro _ ‚ü®x, hx, rfl‚ü©
    simpa using ne_zero hx

open nonZeroDivisors Algebra FractionalIdeal
section numberfield

open NumberField

variable (K L M : Type*) [Field K] [NumberField K] [Field L] [NumberField L] [Field M]
  [NumberField M] [Algebra K L] [Algebra K M] [Algebra L M] [IsScalarTower K L M]

theorem differentIdeal_eq_differentIdeal_mul_differentIdeal' :
    differentIdeal (ùìû K) (ùìû M) =
       differentIdeal (ùìû L) (ùìû M) *
        (differentIdeal (ùìû K) (ùìû L)).map (algebraMap (ùìû L) (ùìû M)) :=
  differentIdeal_eq_differentIdeal_mul_differentIdeal (ùìû K) K (ùìû L) L (ùìû M) M

end numberfield
namespace IntermediateField.LinearDisjoint

open Submodule IntermediateField

variable {A K C M : Type*} [CommRing A] [Field K] [CommRing C] [Field M] [Algebra K M]
  [Algebra A K] [IsFractionRing A K] [Algebra C M]
  {L‚ÇÅ L‚ÇÇ : IntermediateField K M} {B‚ÇÅ B‚ÇÇ : Type*} [CommRing B‚ÇÅ] [CommRing B‚ÇÇ]
  [Algebra B‚ÇÅ L‚ÇÅ] [Algebra B‚ÇÇ L‚ÇÇ] [Algebra A B‚ÇÇ] [Algebra A L‚ÇÇ] [Algebra B‚ÇÅ C] [Algebra B‚ÇÇ C]
  [Algebra B‚ÇÅ M] [Algebra B‚ÇÇ M] [IsScalarTower A K L‚ÇÇ] [IsScalarTower A B‚ÇÇ L‚ÇÇ]
  [IsScalarTower B‚ÇÅ C M] [IsScalarTower B‚ÇÇ C M] [IsScalarTower B‚ÇÅ L‚ÇÅ M] [IsScalarTower B‚ÇÇ L‚ÇÇ M]
  [Algebra.IsSeparable K M] [FiniteDimensional K M]

variable (A B‚ÇÅ B‚ÇÇ C) in
theorem traceDual_le_span_traceDual [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
    traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) ‚â§
      span C (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) := by
  intro x hx
  let b := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
  have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let b' : Basis _ L‚ÇÅ M := h‚ÇÅ.basisOfBasisLeft h‚ÇÇ' b.traceDual
  rw [‚Üê b'.sum_repr x]
  refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
  rsuffices ‚ü®c, hc‚ü© : b'.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
    have : (h‚ÇÅ.basisOfBasisLeft h‚ÇÇ' b).traceDual = b' := by
      refine (DFunLike.ext'_iff.trans Basis.traceDual_eq_iff).mpr fun _ _ ‚Ü¶ ?_
      rw [h‚ÇÅ.basisOfBasisLeft_apply, h‚ÇÅ.basisOfBasisLeft_apply, traceForm_apply, ‚Üê map_mul,
        h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b.trace_traceDual_mul, MonoidWithZeroHom.map_ite_one_zero]
    rw [‚Üê this, (h‚ÇÅ.basisOfBasisLeft h‚ÇÇ' b).traceDual_repr_apply x i]
    refine mem_traceDual.mp hx _ ?_
    rw [mem_one, h‚ÇÅ.basisOfBasisLeft_apply, Basis.localizationLocalization_apply,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ C M]
    exact ‚ü®_, rfl‚ü©
  rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ, algebra_compatible_smul C]
  refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
  refine ‚ü®b.traceDual i, ?_, by rw [h‚ÇÅ.basisOfBasisLeft_apply]‚ü©
  rw [SetLike.mem_coe, ‚Üê restrictScalars_mem A, traceDual_span_of_basis A _ b
    (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
  exact Submodule.subset_span <| Set.mem_range_self i

variable [IsDomain A] [IsDomain B‚ÇÅ]
  [IsIntegrallyClosed A] [IsIntegrallyClosed B‚ÇÅ] [IsDedekindDomain B‚ÇÇ] [IsDedekindDomain C]
  [IsFractionRing B‚ÇÅ L‚ÇÅ] [IsFractionRing B‚ÇÇ L‚ÇÇ] [IsFractionRing C M]
  [IsIntegralClosure B‚ÇÇ A L‚ÇÇ] [IsIntegralClosure C B‚ÇÇ M] [IsIntegralClosure C B‚ÇÅ M]
  [NoZeroSMulDivisors B‚ÇÅ C] [NoZeroSMulDivisors B‚ÇÇ C]

variable (A B‚ÇÅ B‚ÇÇ C) in
theorem differentIdeal_dvd_differentIdeal_map [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
    differentIdeal B‚ÇÅ C ‚à£ (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) := by
  have := IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
  have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
  rw [Ideal.dvd_iff_le, ‚Üê coeIdeal_le_coeIdeal' C‚Å∞ (P := M) le_rfl, coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ,
    le_inv_comm _ (by simp), ‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M, ‚Üê extended_inv,
    coeIdeal_differentIdeal A K, inv_inv, ‚Üê coe_le_coe, coe_dual_one, coe_extended_eq_span,
    ‚Üê coeToSet_coeToSubmodule, coe_dual_one]
  ¬∑ convert traceDual_le_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
    exact (IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M).symm
  ¬∑ exact coeIdeal_ne_zero.mpr <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ
  ¬∑ exact coeIdeal_ne_zero.mpr <| Ideal.map_ne_bot_of_ne_bot <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ

variable [Algebra A B‚ÇÅ] [IsDedekindDomain B‚ÇÅ] [NoZeroSMulDivisors A B‚ÇÅ]
  [Algebra A L‚ÇÅ] [Algebra A C] [Algebra A M] [IsScalarTower A B‚ÇÅ L‚ÇÅ] [IsScalarTower A K L‚ÇÅ]
  [IsScalarTower A C M] [IsScalarTower A K M] [IsIntegralClosure B‚ÇÅ A L‚ÇÅ] [IsIntegralClosure C A M]
  [NoZeroSMulDivisors A C]

theorem differentIdeal_map_eq_differentIdeal [Module.Free A B‚ÇÅ] [Module.Finite A B‚ÇÅ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C))) :
    (differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C) = differentIdeal B‚ÇÇ C := by
  have := IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
  have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
  have main := (differentIdeal_eq_differentIdeal_mul_differentIdeal
    A K B‚ÇÅ L‚ÇÅ C M).symm.trans (differentIdeal_eq_differentIdeal_mul_differentIdeal A K B‚ÇÇ L‚ÇÇ C M)
  apply dvd_antisymm'
  ¬∑ have h' : IsCoprime (differentIdeal B‚ÇÇ C) (differentIdeal B‚ÇÅ C) := by
      refine (h‚ÇÉ.of_isCoprime_of_dvd_right ?_).of_isCoprime_of_dvd_left ?_
      ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
      ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÇ B‚ÇÅ h‚ÇÅ.symm (by rwa [sup_comm])
    exact h'.dvd_of_dvd_mul_left (dvd_of_mul_right_eq _ main.symm)
  ¬∑ exact h‚ÇÉ.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ main)

example [Module.Free A B‚ÇÅ] [Module.Finite A B‚ÇÅ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C)))
    {Œπ : Type*} (b : Basis Œπ A B‚ÇÇ) :
    span B‚ÇÅ (Set.range (algebraMap B‚ÇÇ M ‚àò b)) =
      LinearMap.range (IsScalarTower.toAlgHom B‚ÇÅ C M) := by
  haveI h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ

--  have : algebraMap L‚ÇÇ M ‚àò b = h‚ÇÅ.basisOfBasisLeft h‚ÇÇ' b := by ext; simp
--  rw [this]
  have : IsLocalization (algebraMapSubmonoid C B‚ÇÅ‚Å∞) M := sorry
  let b‚ÇÄ : Basis Œπ B‚ÇÅ C := sorry
  have := Basis.localizationLocalization_span (R := B‚ÇÅ) L‚ÇÅ B‚ÇÅ‚Å∞ (A := C) M b‚ÇÄ
  sorry

end IntermediateField.LinearDisjoint
