import Mathlib

open nonZeroDivisors NumberField

theorem LinearMap.BilinForm.dualBasis_eq_iff {V : Type*} {K : Type*} [Field K] [AddCommGroup V]
    [Module K V] {Œπ : Type*} [DecidableEq Œπ] [Finite Œπ] (B : LinearMap.BilinForm K V)
    (hB : B.Nondegenerate) (b : Basis Œπ K V) (v : Œπ ‚Üí V) :
    B.dualBasis hB b = v ‚Üî ‚àÄ i j, B (v i) (b j) = if j = i then 1 else 0 :=
  ‚ü®fun h _ _ ‚Ü¶ by rw [‚Üê h, apply_dualBasis_left],
    fun h ‚Ü¶ funext fun _ ‚Ü¶ (B.dualBasis hB b).ext_elem_iff.mpr fun _ ‚Ü¶ by
      rw [dualBasis_repr_apply, dualBasis_repr_apply, apply_dualBasis_left, h]‚ü©

/-- Doc -/
noncomputable def Basis.traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    Basis Œπ K L :=
  (Algebra.traceForm K L).dualBasis (traceForm_nondegenerate K L) b

@[simp]
theorem Basis.traceDual_repr_apply {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (x : L) (i : Œπ) :
    (b.traceDual).repr x i = (Algebra.traceForm K L x) (b i) :=
  (Algebra.traceForm K L).dualBasis_repr_apply _ b _ i

theorem Basis.trace_traceDual_mul {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (i j : Œπ) :
    Algebra.trace K L ((b.traceDual i) * (b j)) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).apply_dualBasis_left _ _ i j

theorem Basis.trace_mul_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (i j : Œπ) :
    Algebra.trace K L ((b i) * (b.traceDual j)) = if i = j then 1 else 0 := by
  refine (Algebra.traceForm K L).apply_dualBasis_right _ (Algebra.traceForm_isSymm K) _ i j

@[simp]
theorem Basis.traceDual_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    b.traceDual.traceDual = b :=
  (Algebra.traceForm K L).dualBasis_dualBasis _ (Algebra.traceForm_isSymm K) _

@[simp]
theorem Basis.traceDual_involutive (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Involutive (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  fun b ‚Ü¶ traceDual_traceDual b

theorem Basis.traceDual_injective (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Injective (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  (traceDual_involutive K L).injective

@[simp]
theorem Basis.traceDual_inj {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b b' : Basis Œπ K L):
    b.traceDual = b'.traceDual ‚Üî b = b' :=
  (traceDual_injective K L).eq_iff

theorem Basis.traceDual_eq_iff {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    {b : Basis Œπ K L} {v : Œπ ‚Üí L} :
    b.traceDual = v ‚Üî
      ‚àÄ i j, Algebra.traceForm K L (v i) (b j) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).dualBasis_eq_iff (traceForm_nondegenerate K L) b v

-- example {K M : Type*} [Field K] [Field M] [Algebra K M] [FiniteDimensional K M]
--     [Algebra.IsSeparable K M] {L‚ÇÅ L‚ÇÇ : IntermediateField K M}
--     (h‚ÇÅ : L‚ÇÅ.toSubalgebra.LinearDisjoint L‚ÇÇ.toSubalgebra)
--     (h‚ÇÇ : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§) {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
--     (b : Basis Œπ K L‚ÇÇ) :
--     (b.traceDual.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ).traceDual =
--       (b.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ : Basis Œπ L‚ÇÅ M) := sorry






@[simp]
theorem Submodule.traceDual_restrictScalars (A K : Type*) {L B : Type*} [CommRing A] [Field K]
    [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B] [Algebra K L] [Algebra A L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) :
    (Submodule.traceDual A K I).restrictScalars A =
      (Algebra.traceForm K L).dualSubmodule (I.restrictScalars A) := rfl

theorem Submodule.traceDual_span_of_basis (A : Type*) {K L B : Type*}
    [CommRing A] [Field K] [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B]
    [Algebra K L] [Algebra A L] [FiniteDimensional K L] [Algebra.IsSeparable K L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) {Œπ : Type*} [Finite Œπ]
    [DecidableEq Œπ] (b : Basis Œπ K L) (hb : I.restrictScalars A = Submodule.span A (Set.range b)) :
    (Submodule.traceDual A K I).restrictScalars A = Submodule.span A (Set.range b.traceDual) := by
  rw [traceDual_restrictScalars, hb]
  exact (Algebra.traceForm K L).dualSubmodule_span_of_basis (traceForm_nondegenerate K L) b

instance (K : Type*) [Field K] [NumberField K] (F : Type*) [Field F] [NumberField F] [Algebra F K] :
    IsLocalization (Algebra.algebraMapSubmonoid (ùìû K) (ùìû F)‚Å∞) K := by
  refine IsLocalization.of_le (Algebra.algebraMapSubmonoid (ùìû K) ‚Ñ§‚Å∞) _ ?_ ?_
  ¬∑ rintro _ ‚ü®a, ha, rfl‚ü©
    exact ‚ü®a, by simpa using ne_zero ha, by simp‚ü©
  ¬∑ rintro _ ‚ü®x, hx, rfl‚ü©
    simpa using ne_zero hx

open nonZeroDivisors Algebra FractionalIdeal
section numberfield

open NumberField

variable (K L M : Type*) [Field K] [NumberField K] [Field L] [NumberField L] [Field M]
  [NumberField M] [Algebra K L] [Algebra K M] [Algebra L M] [IsScalarTower K L M]

theorem differentIdeal_eq_differentIdeal_mul_differentIdeal' :
    differentIdeal (ùìû K) (ùìû M) =
       differentIdeal (ùìû L) (ùìû M) *
        (differentIdeal (ùìû K) (ùìû L)).map (algebraMap (ùìû L) (ùìû M)) :=
  differentIdeal_eq_differentIdeal_mul_differentIdeal (ùìû K) K (ùìû L) L (ùìû M) M

end numberfield

section general_compositum

-- variable (A K B L C M : Type*) [CommRing A] [Field K] [CommRing B] [Field L] [Algebra A K]
--   [Algebra B L] [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A K L]
--   [IsScalarTower A B L] [IsDomain A] [IsFractionRing A K] [Algebra.IsSeparable K L]
--   [IsIntegralClosure B A L] [IsIntegrallyClosed A] [IsDedekindDomain B] [NoZeroSMulDivisors A B]
--   [IsFractionRing B L] [CommRing C] [Field M] [Algebra C M] [IsFractionRing C M] [Algebra B C]
--   [Algebra A C] [Algebra K M] [Algebra L M] [Algebra B M] [Algebra A M] [IsScalarTower K L M]
--   [IsScalarTower A K M] [IsScalarTower A C M] [IsScalarTower B C M] [IsScalarTower B L M]
--   [IsDedekindDomain C] [NoZeroSMulDivisors A C] [Algebra.IsSeparable K M] [FiniteDimensional K M]
--   [IsIntegralClosure C B M] [IsIntegralClosure C A M] [NoZeroSMulDivisors B C]
--   [IsLocalization (algebraMapSubmonoid C B‚Å∞) M]

variable {A K C M : Type*} [CommRing A] [Field K] [Algebra A K] [IsFractionRing A K] [CommRing C]
  [Field M] [Algebra C M] [IsFractionRing C M] [Algebra K M]
  (L‚ÇÅ L‚ÇÇ : IntermediateField K M) {B‚ÇÅ B‚ÇÇ : Type*} [CommRing B‚ÇÅ] [CommRing B‚ÇÇ] [Algebra B‚ÇÅ L‚ÇÅ]
  [Algebra B‚ÇÇ L‚ÇÇ] [IsFractionRing B‚ÇÅ L‚ÇÅ] [IsFractionRing B‚ÇÇ L‚ÇÇ]
  [Algebra A B‚ÇÅ] [Algebra A B‚ÇÇ] [Algebra B‚ÇÅ C] [Algebra B‚ÇÅ M] [Algebra B‚ÇÇ C]
  [Algebra A L‚ÇÇ] [Algebra B‚ÇÇ M]
  [IsDomain A] [IsDedekindDomain B‚ÇÇ] [IsDomain B‚ÇÅ] [IsDedekindDomain C]
  [NoZeroSMulDivisors A B‚ÇÇ] [NoZeroSMulDivisors B‚ÇÅ C] [NoZeroSMulDivisors B‚ÇÇ C]
  [IsIntegrallyClosed A] [IsIntegrallyClosed B‚ÇÅ]
  [IsIntegralClosure B‚ÇÇ A L‚ÇÇ] [IsIntegralClosure C B‚ÇÅ M]
  [IsScalarTower A B‚ÇÇ L‚ÇÇ] [IsScalarTower A K L‚ÇÇ]
  [IsScalarTower B‚ÇÅ C M] [IsScalarTower B‚ÇÅ L‚ÇÅ M]
  [IsScalarTower B‚ÇÇ L‚ÇÇ M] [IsScalarTower B‚ÇÇ C M]
  [IsLocalization (algebraMapSubmonoid C B‚ÇÇ‚Å∞) M]
  [Algebra.IsSeparable K M] [FiniteDimensional K M]
  (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)

open Submodule IntermediateField

set_option maxHeartbeats 1000000 in
example {Œπ : Type*} (b : Basis Œπ K L‚ÇÇ)
    (hb : (1 : Submodule B‚ÇÇ L‚ÇÇ).restrictScalars A = span A (Set.range b)) :
    differentIdeal B‚ÇÅ C ‚à£ (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) := by
  classical

  have : Algebra.IsSeparable L‚ÇÅ M := isSeparable_tower_top_of_isSeparable K L‚ÇÅ M
  have : Algebra.IsSeparable K L‚ÇÇ := isSeparable_tower_bot_of_isSeparable K L‚ÇÇ M
  have : FiniteDimensional L‚ÇÅ M := Module.Finite.right K L‚ÇÅ M
  have : FiniteDimensional K L‚ÇÅ := Module.Finite.left K L‚ÇÅ M
  have : FiniteDimensional K L‚ÇÇ := Module.Finite.left K L‚ÇÇ M
  suffices ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) : FractionalIdeal C‚Å∞ M) ‚â§
      (differentIdeal B‚ÇÅ C : FractionalIdeal C‚Å∞ M) by
    rw [‚Üê coe_le_coe] at this
    simp only [coe_coeIdeal, IsFractionRing.coeSubmodule_le_coeSubmodule] at this
    rwa [Ideal.dvd_iff_le]
  rw [coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ]
  rw [‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M]
  rw [coeIdeal_differentIdeal A K]
  rw [extended_inv _ (by simp)]
  rw [le_inv_comm ( inv_ne_zero <| extended_ne_zero _ _ (FaithfulSMul.algebraMap_injective _ _)
    (by simp)) (by simp), inv_inv]
  rw [‚Üê coe_le_coe]
  rw [coe_dual _ _ (by simp), coe_extended_eq_span, coe_one]
  have := IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M
  erw [‚Üê this]
  intro x hx
  rw [IntermediateField.linearDisjoint_iff'] at h‚ÇÅ
  have : Fintype Œπ := by
    apply FiniteDimensional.fintypeBasisIndex b
  let b' := b.traceDual
  replace h‚ÇÇ : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let B' : Basis Œπ L‚ÇÅ M := b'.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ
  let B‚ÇÄ := B'.traceDual
  rw [‚Üê B'.sum_repr x]
  have : ‚àÉ c : Œπ ‚Üí B‚ÇÅ, ‚àÄ i, B'.repr x i = algebraMap B‚ÇÅ L‚ÇÅ (c i) := by
    have h_cons‚ÇÅ (i : Œπ) : trace L‚ÇÅ M (x * B‚ÇÄ i) ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
        rw [mem_traceDual] at hx
        specialize hx (B‚ÇÄ i) ?_
        ¬∑ refine mem_one.mpr ?_
          have h_cons‚ÇÇ :  ‚àÉ y, (algebraMap B‚ÇÇ ‚Ü•L‚ÇÇ) y = b i := by
            rw [‚Üê mem_one, ‚Üê restrictScalars_mem A, hb]
            exact Submodule.subset_span (Set.mem_range_self i)
          refine ‚ü®?_, ?_‚ü©
          ¬∑ exact algebraMap B‚ÇÇ C h_cons‚ÇÇ.choose
          ¬∑ dsimp
            have := h_cons‚ÇÇ.choose_spec
            rw [‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ L‚ÇÇ M, this]
            erw [‚Üê b.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ]
            simp [B‚ÇÄ, B']
            refine congr_fun ?_ i
            rw [eq_comm, Basis.traceDual_eq_iff]
            intro i j
            simp [b']
            rw [b.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ i,
              b.traceDual.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ j, ‚Üê map_mul]
            have := h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ (b i * b.traceDual j)
            erw [this]
            simp
            rw [mul_comm, Basis.apply_traceDual]
            simp [eq_comm]
        ¬∑ rwa [traceForm_apply] at hx
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro i
      exact (h_cons‚ÇÅ i).choose
    ¬∑ intro i
      have := (h_cons‚ÇÅ i).choose_spec
      rw [this]
      nth_rewrite 2 [‚Üê B'.sum_repr x]
      rw [Finset.sum_mul, map_sum]
      simp_rw [smul_mul_assoc, map_smul, mul_comm (B' _)]
      simp_rw [B‚ÇÄ, B'.apply_traceDual]
      simp
  obtain ‚ü®c, hc‚ü© := this
  simp_rw [hc, Algebra.smul_def]
  have {x} : algebraMap L‚ÇÅ M (algebraMap B‚ÇÅ L‚ÇÅ x) =
      algebraMap C M (algebraMap B‚ÇÅ C x) := by
    rw [‚Üê IsScalarTower.algebraMap_apply, ‚Üê IsScalarTower.algebraMap_apply]
  simp_rw [this]
  simp_rw [‚Üê Algebra.smul_def]
  apply Submodule.sum_smul_mem
  intro i _
  apply Submodule.subset_span
  refine ‚ü®b' i, ?_, ?_‚ü©
  ¬∑ rw [SetLike.mem_coe, ‚Üê mem_coe, coe_dual_one]
    have := Submodule.traceDual_span_of_basis A (K := K) (B := B‚ÇÇ) (1 : Submodule B‚ÇÇ L‚ÇÇ) b hb
    change b' i ‚àà (traceDual A K 1).restrictScalars A
    rw [this]
    apply subset_span
    exact Set.mem_range_self i
  ¬∑ simp [B']
    have := b'.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ i
    change algebraMap L‚ÇÇ M (b' i) = _
    exact this.symm

example [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ] :
    traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) ‚â§
      span C (algebraMap L‚ÇÇ M '' (dual A K (1 : FractionalIdeal B‚ÇÇ‚Å∞ L‚ÇÇ))) := by
  intro x hx
  rw [IntermediateField.linearDisjoint_iff'] at h‚ÇÅ
  let b := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
  replace h‚ÇÇ : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let b' : Basis _ L‚ÇÅ M := b.traceDual.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ
  rw [‚Üê b'.sum_repr x]
  refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
  rsuffices ‚ü®c, hc‚ü© : b'.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
    have : (b.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ).traceDual = b' := by
      rw [DFunLike.ext'_iff, Basis.traceDual_eq_iff]
      intro i j
      rw [b.ofLinearDisjointLeft_apply, b.traceDual.ofLinearDisjointLeft_apply, traceForm_apply,
        ‚Üê map_mul]
      change trace L‚ÇÅ.toSubalgebra M _ = _
      erw [h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b.trace_traceDual_mul]
      simp
    rw [‚Üê this]
    rw [Basis.traceDual_repr_apply (K := L‚ÇÅ) (b.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ) x i]
    refine mem_traceDual.mp hx (b.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ i) ?_
    sorry
  rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ, algebra_compatible_smul C]
  refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
  refine ‚ü®b.traceDual i, ?_, by rw [Basis.ofLinearDisjointLeft_apply]; rfl‚ü©
  rw [SetLike.mem_coe, ‚Üê mem_coe, coe_dual_one, ‚Üê restrictScalars_mem A, traceDual_span_of_basis
    A _ b (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
  exact Submodule.subset_span <| Set.mem_range_self i

set_option maxHeartbeats 1000000 in
example [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ] :
    differentIdeal B‚ÇÅ C ‚à£ (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) := by

  let b‚ÇÄ := Module.Free.chooseBasis A B‚ÇÇ
  let b := b‚ÇÄ.localizationLocalization K A‚Å∞ L‚ÇÇ
  have : Algebra.IsSeparable L‚ÇÅ M := isSeparable_tower_top_of_isSeparable K L‚ÇÅ M
  have : Algebra.IsSeparable K L‚ÇÇ := isSeparable_tower_bot_of_isSeparable K L‚ÇÇ M
  have : FiniteDimensional L‚ÇÅ M := Module.Finite.right K L‚ÇÅ M
  have : FiniteDimensional K L‚ÇÅ := Module.Finite.left K L‚ÇÅ M
  have : FiniteDimensional K L‚ÇÇ := Module.Finite.left K L‚ÇÇ M
  suffices ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) : FractionalIdeal C‚Å∞ M) ‚â§
      (differentIdeal B‚ÇÅ C : FractionalIdeal C‚Å∞ M) by
    rw [‚Üê coe_le_coe] at this
    simp only [coe_coeIdeal, IsFractionRing.coeSubmodule_le_coeSubmodule] at this
    rwa [Ideal.dvd_iff_le]
  rw [coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ]
  rw [‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M]
  rw [coeIdeal_differentIdeal A K]
  rw [extended_inv _ (by simp)]
  rw [le_inv_comm ( inv_ne_zero <| extended_ne_zero _ _ (FaithfulSMul.algebraMap_injective _ _)
    (by simp)) (by simp), inv_inv]
  rw [‚Üê coe_le_coe]
  rw [coe_dual _ _ (by simp), coe_extended_eq_span, coe_one]
  have := IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M
  erw [‚Üê this]

  intro x hx
  rw [IntermediateField.linearDisjoint_iff'] at h‚ÇÅ
  let b' := b.traceDual
  replace h‚ÇÇ : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let B' : Basis _ L‚ÇÅ M := b'.ofLinearDisjointLeft h‚ÇÅ h‚ÇÇ
  let B‚ÇÄ := B'.traceDual
  rw [‚Üê B'.sum_repr x]
  have : ‚àÉ c : _ ‚Üí B‚ÇÅ, ‚àÄ i, B'.repr x i = algebraMap B‚ÇÅ L‚ÇÅ (c i) := by
    have h_cons‚ÇÅ (i) : trace L‚ÇÅ M (x * B‚ÇÄ i) ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
        rw [mem_traceDual] at hx
        specialize hx (B‚ÇÄ i) ?_
        ¬∑ refine mem_one.mpr ?_
          have h_cons‚ÇÇ :  ‚àÉ y, (algebraMap B‚ÇÇ ‚Ü•L‚ÇÇ) y = b i := by
            have := b‚ÇÄ.localizationLocalization_span K A‚Å∞ L‚ÇÇ
            change b i ‚àà LinearMap.range (IsScalarTower.toAlgHom A B‚ÇÇ L‚ÇÇ)
            rw [‚Üê this]
            exact Submodule.subset_span (Set.mem_range_self i)
          refine ‚ü®?_, ?_‚ü©
          ¬∑ exact algebraMap B‚ÇÇ C h_cons‚ÇÇ.choose
          ¬∑ dsimp
            have := h_cons‚ÇÇ.choose_spec
            rw [‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ L‚ÇÇ M, this]
            erw [‚Üê b.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ]
            simp [B‚ÇÄ, B']
            refine congr_fun ?_ i
            rw [eq_comm, Basis.traceDual_eq_iff]
            intro i j
            simp [b']
            rw [b.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ i,
              b.traceDual.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ j, ‚Üê map_mul]
            have := h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ (b i * b.traceDual j)
            erw [this]
            simp
            rw [mul_comm, Basis.apply_traceDual]
            simp [eq_comm]
        ¬∑ rwa [traceForm_apply] at hx
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro i
      exact (h_cons‚ÇÅ i).choose
    ¬∑ intro i
      have := (h_cons‚ÇÅ i).choose_spec
      rw [this]
      nth_rewrite 2 [‚Üê B'.sum_repr x]
      rw [Finset.sum_mul, map_sum]
      simp_rw [smul_mul_assoc, map_smul, mul_comm (B' _)]
      simp_rw [B‚ÇÄ, B'.apply_traceDual]
      simp
  obtain ‚ü®c, hc‚ü© := this
  simp_rw [hc, Algebra.smul_def]
  have {x} : algebraMap L‚ÇÅ M (algebraMap B‚ÇÅ L‚ÇÅ x) =
      algebraMap C M (algebraMap B‚ÇÅ C x) := by
    rw [‚Üê IsScalarTower.algebraMap_apply, ‚Üê IsScalarTower.algebraMap_apply]
  simp_rw [this]
  simp_rw [‚Üê Algebra.smul_def]
  apply Submodule.sum_smul_mem
  intro i _
  apply Submodule.subset_span
  refine ‚ü®b' i, ?_, ?_‚ü©
  ¬∑ rw [SetLike.mem_coe, ‚Üê mem_coe, coe_dual_one]
    have := b‚ÇÄ.localizationLocalization_span K A‚Å∞ L‚ÇÇ
    have := Submodule.traceDual_span_of_basis A (K := K) (B := B‚ÇÇ) (1 : Submodule B‚ÇÇ L‚ÇÇ) b
      (by rw [this]; ext; simp)
    change b' i ‚àà (traceDual A K 1).restrictScalars A
    rw [this]
    apply subset_span
    exact Set.mem_range_self i
  ¬∑ simp [B']
    have := b'.ofLinearDisjointLeft_apply h‚ÇÅ h‚ÇÇ i
    change algebraMap L‚ÇÇ M (b' i) = _
    exact this.symm


#exit




end general_compositum

section numberfield

variable (M : Type*) [Field M] [NumberField M] (L‚ÇÅ L‚ÇÇ : IntermediateField ‚Ñö M)
  (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)

example :
    (differentIdeal ‚Ñ§ (ùìû L‚ÇÇ)).map (algebraMap (ùìû L‚ÇÇ) (ùìû M)) ‚â§
      differentIdeal (ùìû L‚ÇÅ) (ùìû M) := by
  rw [‚Üê coeIdeal_le_coeIdeal M, coeIdeal_differentIdeal _ L‚ÇÅ,
    ‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M, coeIdeal_differentIdeal _ ‚Ñö,
    extended_inv _ (by simp), le_inv_comm sorry sorry, inv_inv, ‚Üê coe_le_coe, coe_dual,
    coe_extended_eq_span, coe_one]
  have :=  IsLocalization.algebraMap_eq_map_map_submonoid (ùìû L‚ÇÇ)‚Å∞ (ùìû M) L‚ÇÇ M
  erw [‚Üê this]
  rw [show ‚Üë(dual ‚Ñ§ ‚Ñö (1 :FractionalIdeal (ùìû L‚ÇÇ)‚Å∞ L‚ÇÇ)) =
    ((Submodule.traceDual ‚Ñ§ ‚Ñö (1 : Submodule (ùìû L‚ÇÇ) L‚ÇÇ)).restrictScalars ‚Ñ§ : Set L‚ÇÇ)
    by sorry]
  let b := integralBasis L‚ÇÇ
  have := Submodule.traceDual_span_of_basis ‚Ñ§ (1 : Submodule (ùìû L‚ÇÇ) L‚ÇÇ) b sorry
  rw [this]
  intro x hx




end numberfield
