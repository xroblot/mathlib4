import Mathlib

open nonZeroDivisors NumberField

theorem LinearMap.BilinForm.dualBasis_eq_iff {V : Type*} {K : Type*} [Field K] [AddCommGroup V]
    [Module K V] {Œπ : Type*} [DecidableEq Œπ] [Finite Œπ] (B : LinearMap.BilinForm K V)
    (hB : B.Nondegenerate) (b : Basis Œπ K V) (v : Œπ ‚Üí V) :
    B.dualBasis hB b = v ‚Üî ‚àÄ i j, B (v i) (b j) = if j = i then 1 else 0 :=
  ‚ü®fun h _ _ ‚Ü¶ by rw [‚Üê h, apply_dualBasis_left],
    fun h ‚Ü¶ funext fun _ ‚Ü¶ (B.dualBasis hB b).ext_elem_iff.mpr fun _ ‚Ü¶ by
      rw [dualBasis_repr_apply, dualBasis_repr_apply, apply_dualBasis_left, h]‚ü©

/-- Doc -/
noncomputable def Basis.traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    Basis Œπ K L :=
  (Algebra.traceForm K L).dualBasis (traceForm_nondegenerate K L) b

@[simp]
theorem Basis.traceDual_repr_apply {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (x : L) (i : Œπ) :
    (b.traceDual).repr x i = (Algebra.traceForm K L x) (b i) :=
  (Algebra.traceForm K L).dualBasis_repr_apply _ b _ i

theorem Basis.apply_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (i j : Œπ) :
    Algebra.trace K L ((b.traceDual i) * (b j)) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).apply_dualBasis_left _ _ i j

@[simp]
theorem Basis.traceDual_traceDual {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) :
    b.traceDual.traceDual = b :=
  (Algebra.traceForm K L).dualBasis_dualBasis _ (Algebra.traceForm_isSymm K) _

@[simp]
theorem Basis.traceDual_involutive (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Involutive (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  fun b ‚Ü¶ traceDual_traceDual b

theorem Basis.traceDual_injective (K L : Type*) [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ] :
    Function.Injective (Basis.traceDual : Basis Œπ K L ‚Üí Basis Œπ K L) :=
  (traceDual_involutive K L).injective

@[simp]
theorem Basis.traceDual_inj {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b b' : Basis Œπ K L):
    b.traceDual = b'.traceDual ‚Üî b = b' :=
  (traceDual_injective K L).eq_iff

theorem Basis.traceDual_eq_iff {K : Type*} {L : Type*} [Field K] [Field L] [Algebra K L]
    [FiniteDimensional K L] [Algebra.IsSeparable K L] {Œπ : Type*} [Finite Œπ] [DecidableEq Œπ]
    (b : Basis Œπ K L) (v : Œπ ‚Üí L) :
    b.traceDual = v ‚Üî
      ‚àÄ i j, Algebra.traceForm K L (v i) (b j) = if j = i then 1 else 0 :=
  (Algebra.traceForm K L).dualBasis_eq_iff (traceForm_nondegenerate K L) b v

@[simp]
theorem Submodule.traceDual_restrictScalars (A K : Type*) {L B : Type*} [CommRing A] [Field K]
    [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B] [Algebra K L] [Algebra A L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) :
    (Submodule.traceDual A K I).restrictScalars A =
      (Algebra.traceForm K L).dualSubmodule (I.restrictScalars A) := rfl

theorem Submodule.traceDual_span_of_basis (A : Type*) {K L B : Type*}
    [CommRing A] [Field K] [CommRing B] [Field L] [Algebra A K] [Algebra B L] [Algebra A B]
    [Algebra K L] [Algebra A L] [FiniteDimensional K L] [Algebra.IsSeparable K L]
    [IsScalarTower A K L] [IsScalarTower A B L] (I : Submodule B L) {Œπ : Type*} [Finite Œπ]
    [DecidableEq Œπ] (b : Basis Œπ K L) (hb : I.restrictScalars A = Submodule.span A (Set.range b)) :
    (Submodule.traceDual A K I).restrictScalars A = Submodule.span A (Set.range b.traceDual) := by
  rw [traceDual_restrictScalars, hb]
  exact (Algebra.traceForm K L).dualSubmodule_span_of_basis (traceForm_nondegenerate K L) b

instance (K : Type*) [Field K] [NumberField K] (F : Type*) [Field F] [NumberField F] [Algebra F K] :
    IsLocalization (Algebra.algebraMapSubmonoid (ùìû K) (ùìû F)‚Å∞) K := by
  refine IsLocalization.of_le (Algebra.algebraMapSubmonoid (ùìû K) ‚Ñ§‚Å∞) _ ?_ ?_
  ¬∑ rintro _ ‚ü®a, ha, rfl‚ü©
    exact ‚ü®a, by simpa using ne_zero ha, by simp‚ü©
  ¬∑ rintro _ ‚ü®x, hx, rfl‚ü©
    simpa using ne_zero hx

open nonZeroDivisors Algebra FractionalIdeal
section numberfield

open NumberField

variable (K L M : Type*) [Field K] [NumberField K] [Field L] [NumberField L] [Field M]
  [NumberField M] [Algebra K L] [Algebra K M] [Algebra L M] [IsScalarTower K L M]

theorem differentIdeal_eq_differentIdeal_mul_differentIdeal' :
    differentIdeal (ùìû K) (ùìû M) =
       differentIdeal (ùìû L) (ùìû M) *
        (differentIdeal (ùìû K) (ùìû L)).map (algebraMap (ùìû L) (ùìû M)) :=
  differentIdeal_eq_differentIdeal_mul_differentIdeal (ùìû K) K (ùìû L) L (ùìû M) M

end numberfield

section general_compositum

-- variable (A K B L C M : Type*) [CommRing A] [Field K] [CommRing B] [Field L] [Algebra A K]
--   [Algebra B L] [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A K L]
--   [IsScalarTower A B L] [IsDomain A] [IsFractionRing A K] [Algebra.IsSeparable K L]
--   [IsIntegralClosure B A L] [IsIntegrallyClosed A] [IsDedekindDomain B] [NoZeroSMulDivisors A B]
--   [IsFractionRing B L] [CommRing C] [Field M] [Algebra C M] [IsFractionRing C M] [Algebra B C]
--   [Algebra A C] [Algebra K M] [Algebra L M] [Algebra B M] [Algebra A M] [IsScalarTower K L M]
--   [IsScalarTower A K M] [IsScalarTower A C M] [IsScalarTower B C M] [IsScalarTower B L M]
--   [IsDedekindDomain C] [NoZeroSMulDivisors A C] [Algebra.IsSeparable K M] [FiniteDimensional K M]
--   [IsIntegralClosure C B M] [IsIntegralClosure C A M] [NoZeroSMulDivisors B C]
--   [IsLocalization (algebraMapSubmonoid C B‚Å∞) M]

variable {A K C M : Type*} [CommRing A] [Field K] [Algebra A K] [IsFractionRing A K] [CommRing C]
  [Field M] [Algebra C M] [IsFractionRing C M] [Algebra K M]
  (L‚ÇÅ L‚ÇÇ : IntermediateField K M) {B‚ÇÅ B‚ÇÇ : Type*} [CommRing B‚ÇÅ] [CommRing B‚ÇÇ] [Algebra B‚ÇÅ L‚ÇÅ]
  [Algebra B‚ÇÇ L‚ÇÇ] [IsFractionRing B‚ÇÅ L‚ÇÅ] [IsFractionRing B‚ÇÇ L‚ÇÇ]
  [Algebra A B‚ÇÅ] [Algebra A B‚ÇÇ] [Algebra B‚ÇÅ C] [Algebra B‚ÇÅ M] [Algebra B‚ÇÇ C]
  [Algebra A L‚ÇÇ] [Algebra B‚ÇÇ M]
  [IsDomain A] [IsDedekindDomain B‚ÇÇ] [IsDomain B‚ÇÅ] [IsDedekindDomain C]
  [NoZeroSMulDivisors A B‚ÇÇ] [NoZeroSMulDivisors B‚ÇÅ C] [NoZeroSMulDivisors B‚ÇÇ C]
  [IsIntegrallyClosed A] [IsIntegrallyClosed B‚ÇÅ]
  [IsIntegralClosure B‚ÇÇ A L‚ÇÇ] [IsIntegralClosure C B‚ÇÅ M]
  [IsScalarTower A B‚ÇÇ L‚ÇÇ] [IsScalarTower A K L‚ÇÇ]
  [IsScalarTower B‚ÇÅ C M] [IsScalarTower B‚ÇÅ L‚ÇÅ M]
  [IsScalarTower B‚ÇÇ L‚ÇÇ M] [IsScalarTower B‚ÇÇ C M]
  [IsLocalization (algebraMapSubmonoid C B‚ÇÇ‚Å∞) M]
  (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)

open Submodule

example {Œπ : Type*} (b : Basis Œπ K L‚ÇÇ) (hb : span A (Set.range b) = Set.range (algebraMap B‚ÇÇ L‚ÇÇ)) :
    (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) ‚â§ differentIdeal B‚ÇÅ C := by
  have : Algebra.IsSeparable L‚ÇÅ M := sorry
  have : Algebra.IsSeparable K L‚ÇÇ := sorry
  have : FiniteDimensional L‚ÇÅ M := sorry
  have : FiniteDimensional K L‚ÇÅ := sorry
  have : FiniteDimensional K L‚ÇÇ := sorry
  suffices ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) : FractionalIdeal C‚Å∞ M) ‚â§
      (differentIdeal B‚ÇÅ C : FractionalIdeal C‚Å∞ M) by
    sorry
  rw [coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ]
  rw [‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M]
  rw [coeIdeal_differentIdeal A K]
  rw [extended_inv _ (by simp)]
  rw [le_inv_comm sorry sorry, inv_inv]
  rw [‚Üê coe_le_coe]
  rw [coe_dual _ _ (by simp), coe_extended_eq_span, coe_one]
  have := IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M
  erw [‚Üê this]
  intro x hx
  refine (mem_span_image_iff_exists_fun C).mpr ?_
  


end general_compositum

section numberfield

variable (M : Type*) [Field M] [NumberField M] (L‚ÇÅ L‚ÇÇ : IntermediateField ‚Ñö M)
  (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)

example :
    (differentIdeal ‚Ñ§ (ùìû L‚ÇÇ)).map (algebraMap (ùìû L‚ÇÇ) (ùìû M)) ‚â§
      differentIdeal (ùìû L‚ÇÅ) (ùìû M) := by
  rw [‚Üê coeIdeal_le_coeIdeal M, coeIdeal_differentIdeal _ L‚ÇÅ,
    ‚Üê extended_coeIdeal_eq_map_algebraMap (K := L‚ÇÇ) M, coeIdeal_differentIdeal _ ‚Ñö,
    extended_inv _ (by simp), le_inv_comm sorry sorry, inv_inv, ‚Üê coe_le_coe, coe_dual,
    coe_extended_eq_span, coe_one]
  have :=  IsLocalization.algebraMap_eq_map_map_submonoid (ùìû L‚ÇÇ)‚Å∞ (ùìû M) L‚ÇÇ M
  erw [‚Üê this]
  rw [show ‚Üë(dual ‚Ñ§ ‚Ñö (1 :FractionalIdeal (ùìû L‚ÇÇ)‚Å∞ L‚ÇÇ)) =
    ((Submodule.traceDual ‚Ñ§ ‚Ñö (1 : Submodule (ùìû L‚ÇÇ) L‚ÇÇ)).restrictScalars ‚Ñ§ : Set L‚ÇÇ)
    by sorry]
  let b := integralBasis L‚ÇÇ
  have := Submodule.traceDual_span_of_basis ‚Ñ§ (1 : Submodule (ùìû L‚ÇÇ) L‚ÇÇ) b sorry
  rw [this]
  intro x hx




end numberfield
