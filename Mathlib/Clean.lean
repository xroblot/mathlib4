import Mathlib

open nonZeroDivisors NumberField

theorem Submodule.span_mono_left {R S M : Type*} [Semiring R] [Semiring S] [AddCommMonoid M]
    [Module R M] [Module S M] [SMul R S] [IsScalarTower R S M] {s : Set M} :
    (span R s : Set M) ‚â§ span S s := by
  rw [‚Üê Submodule.span_span_of_tower R S]
  exact Submodule.subset_span

theorem differentIdeal_ne_bot' (A K B L : Type*) [CommRing A] [Field K] [Algebra A K]
    [IsFractionRing A K] [CommRing B] [Field L] [Algebra B L] [IsFractionRing B L]
    [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A B L] [IsScalarTower A K L]
    [IsDomain A] [IsIntegrallyClosed A] [IsDedekindDomain B] [NoZeroSMulDivisors A B]
    [Module.Finite A B] [Algebra.IsSeparable K L] :
    differentIdeal A B ‚â† ‚ä• := by
  have : IsLocalization (Algebra.algebraMapSubmonoid B A‚Å∞) L :=
    IsIntegralClosure.isLocalization _ K _ _
  have : FiniteDimensional K L := Module.Finite_of_isLocalization A B _ _ A‚Å∞
  rw [ne_eq, ‚Üê FractionalIdeal.coeIdeal_inj (K := L), coeIdeal_differentIdeal (K := K)]
  simp

open nonZeroDivisors Algebra FractionalIdeal
section numberfield

open NumberField

variable (K L M : Type*) [Field K] [NumberField K] [Field L] [NumberField L] [Field M]
  [NumberField M] [Algebra K L] [Algebra K M] [Algebra L M] [IsScalarTower K L M]

theorem differentIdeal_eq_differentIdeal_mul_differentIdeal' :
    differentIdeal (ùìû K) (ùìû M) =
       differentIdeal (ùìû L) (ùìû M) *
        (differentIdeal (ùìû K) (ùìû L)).map (algebraMap (ùìû L) (ùìû M)) :=
  differentIdeal_eq_differentIdeal_mul_differentIdeal (ùìû K) K L (ùìû L) (ùìû M) M

end numberfield
namespace IntermediateField.LinearDisjoint

open Submodule IntermediateField

variable {A K C M : Type*} [CommRing A] [Field K] [CommRing C] [Field M] [Algebra K M]
  [Algebra A K] [IsFractionRing A K] [Algebra C M] [Algebra A M] [IsScalarTower A K M]
  {L‚ÇÅ L‚ÇÇ : IntermediateField K M} {B‚ÇÅ B‚ÇÇ : Type*} [CommRing B‚ÇÅ] [CommRing B‚ÇÇ] [Algebra B‚ÇÅ L‚ÇÅ]
  [Algebra B‚ÇÇ L‚ÇÇ] [Algebra A B‚ÇÇ] [Algebra B‚ÇÅ C] [Algebra B‚ÇÇ C] [Algebra B‚ÇÅ M] [Algebra B‚ÇÇ M]
  [IsScalarTower A B‚ÇÇ L‚ÇÇ] [IsScalarTower B‚ÇÅ C M] [IsScalarTower B‚ÇÇ C M] [IsScalarTower B‚ÇÅ L‚ÇÅ M]
  [IsScalarTower B‚ÇÇ L‚ÇÇ M] [Algebra.IsSeparable K M] [FiniteDimensional K M]

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem traceDual_le_span_traceDual' [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
    traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) ‚â§
      span C (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) := by
  intro x hx
  let b‚ÇÇ := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
  have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let bM : Basis _ L‚ÇÅ M := h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ.traceDual
  rw [‚Üê bM.sum_repr x]
  refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
  rsuffices ‚ü®c, hc‚ü© : bM.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
    have : (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual = bM := by
      refine (DFunLike.ext'_iff.trans Basis.traceDual_eq_iff).mpr fun _ _ ‚Ü¶ ?_
      rw [h‚ÇÅ.basisOfBasisRight_apply, h‚ÇÅ.basisOfBasisRight_apply, traceForm_apply, ‚Üê map_mul,
        h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b‚ÇÇ.trace_traceDual_mul, MonoidWithZeroHom.map_ite_one_zero]
    rw [‚Üê this, (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual_repr_apply x i]
    refine mem_traceDual.mp hx _ ?_
    rw [mem_one, h‚ÇÅ.basisOfBasisRight_apply, Basis.localizationLocalization_apply,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ C M]
    exact ‚ü®_, rfl‚ü©
  rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ, algebra_compatible_smul C]
  refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
  refine ‚ü®b‚ÇÇ.traceDual i, ?_, by rw [h‚ÇÅ.basisOfBasisRight_apply]‚ü©
  rw [SetLike.mem_coe, ‚Üê restrictScalars_mem A, traceDual_span_of_basis A _ b‚ÇÇ
    (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
  exact Submodule.subset_span <| Set.mem_range_self i

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem traceDual_le_span_traceDual [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
    (traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M)).restrictScalars B‚ÇÅ ‚â§
      span B‚ÇÅ (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) := by
  intro x hx
  let b‚ÇÇ := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
  have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let bM : Basis _ L‚ÇÅ M := h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ.traceDual
  rw [‚Üê bM.sum_repr x]
  refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
  rsuffices ‚ü®c, hc‚ü© : bM.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
    have : (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual = bM := by
      refine (DFunLike.ext'_iff.trans Basis.traceDual_eq_iff).mpr fun _ _ ‚Ü¶ ?_
      rw [h‚ÇÅ.basisOfBasisRight_apply, h‚ÇÅ.basisOfBasisRight_apply, traceForm_apply, ‚Üê map_mul,
        h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b‚ÇÇ.trace_traceDual_mul, MonoidWithZeroHom.map_ite_one_zero]
    rw [‚Üê this, (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual_repr_apply x i]
    refine mem_traceDual.mp hx _ ?_
    rw [mem_one, h‚ÇÅ.basisOfBasisRight_apply, Basis.localizationLocalization_apply,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ C M]
    exact ‚ü®_, rfl‚ü©
  rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ]
  refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
  refine ‚ü®b‚ÇÇ.traceDual i, ?_, by rw [h‚ÇÅ.basisOfBasisRight_apply]‚ü©
  rw [SetLike.mem_coe, ‚Üê restrictScalars_mem A, traceDual_span_of_basis A _ b‚ÇÇ
    (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
  exact Submodule.subset_span <| Set.mem_range_self i

variable [IsDomain A] [IsDomain B‚ÇÅ]
  [IsIntegrallyClosed A] [IsIntegrallyClosed B‚ÇÅ] [IsDedekindDomain B‚ÇÇ] [IsDedekindDomain C]
  [IsFractionRing B‚ÇÅ L‚ÇÅ] [IsFractionRing B‚ÇÇ L‚ÇÇ] [IsFractionRing C M]
  [IsIntegralClosure B‚ÇÇ A L‚ÇÇ] [IsIntegralClosure C B‚ÇÇ M] [IsIntegralClosure C B‚ÇÅ M]
  [NoZeroSMulDivisors B‚ÇÅ C] [NoZeroSMulDivisors B‚ÇÇ C]

-- variable (A B‚ÇÅ B‚ÇÇ C) in
-- -- That's essentially a weaker version of `traceDual_le_span_traceDual'`
-- theorem differentIdeal_dvd_differentIdeal_map [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
--     (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
--     differentIdeal B‚ÇÅ C ‚à£ (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) := by
--   have := IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
--   have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
--   rw [Ideal.dvd_iff_le, ‚Üê coeIdeal_le_coeIdeal' C‚Å∞ (P := M) le_rfl, coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ,
--     le_inv_comm _ (by simp), ‚Üê extended_coeIdeal_eq_map_algebraMap L‚ÇÇ M, ‚Üê extended_inv,
--     coeIdeal_differentIdeal A K, inv_inv, ‚Üê coe_le_coe, coe_dual_one, coe_extended_eq_span,
--     ‚Üê coeToSet_coeToSubmodule, coe_dual_one]
--   ¬∑ convert traceDual_le_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
--     exact (IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M).symm
--   ¬∑ exact coeIdeal_ne_zero.mpr <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ
--   ¬∑ exact coeIdeal_ne_zero.mpr <| Ideal.map_ne_bot_of_ne_bot <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ

variable [Algebra A B‚ÇÅ] [IsDedekindDomain B‚ÇÅ] [NoZeroSMulDivisors A B‚ÇÅ]
  [Algebra A C] [IsScalarTower A B‚ÇÅ L‚ÇÅ] [IsScalarTower A C M] [IsIntegralClosure B‚ÇÅ A L‚ÇÅ]
  [IsIntegralClosure C A M] [NoZeroSMulDivisors A C] [IsScalarTower K L‚ÇÇ M] [IsScalarTower K L‚ÇÅ M]

-- theorem differentIdeal_map_eq_differentIdeal [Module.Free A B‚ÇÅ] [Module.Finite A B‚ÇÅ]
--     [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
--     (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
--       ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C))) :
--     (differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C) = differentIdeal B‚ÇÇ C := by
--   have := IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
--   have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
--   have main := (differentIdeal_eq_differentIdeal_mul_differentIdeal
--     A K L‚ÇÅ B‚ÇÅ C M).symm.trans (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÇ B‚ÇÇ C M)
--   apply dvd_antisymm'
--   ¬∑ have h' : IsCoprime (differentIdeal B‚ÇÇ C) (differentIdeal B‚ÇÅ C) := by
--       refine (h‚ÇÉ.of_isCoprime_of_dvd_right ?_).of_isCoprime_of_dvd_left ?_
--       ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
--       ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÇ B‚ÇÅ h‚ÇÅ.symm (by rwa [sup_comm])
--     exact h'.dvd_of_dvd_mul_left (dvd_of_mul_right_eq _ main.symm)
--   ¬∑ exact h‚ÇÉ.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ main)

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem traceDual_eq_span_traceDual [Module.Finite A B‚ÇÇ] [Module.Free A B‚ÇÇ]
    [NoZeroSMulDivisors A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C))) :
    span B‚ÇÅ (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) =
      (traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M)).restrictScalars B‚ÇÅ := by
  apply le_antisymm
  ¬∑ suffices span C (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) ‚â§
        traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) by
      refine SetLike.coe_subset_coe.mp (subset_trans ?_ this)
      rw [‚Üê Submodule.span_span_of_tower B‚ÇÅ C]
      exact Submodule.subset_span
    have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
    rw [‚Üê coe_dual_one, coeToSet_coeToSubmodule, ‚Üê coe_extended_eq_span_algebraMap, ‚Üê coe_dual_one,
      coe_le_coe, ‚Üê inv_inv (dual B‚ÇÅ L‚ÇÅ 1), ‚Üê le_inv_comm (inv_ne_zero (by simp)),
      ‚Üê extended_inv _ (by simp), ‚Üê coeIdeal_differentIdeal A K, ‚Üê coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ,
      extended_coeIdeal_eq_map_algebraMap L‚ÇÇ M, coeIdeal_le_coeIdeal' _ le_rfl, ‚Üê Ideal.dvd_iff_le]
    ¬∑ have := (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÇ B‚ÇÇ C M).symm.trans
          (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÅ B‚ÇÅ C M)
      exact h‚ÇÉ.symm.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ this)
    ¬∑ exact extended_ne_zero _ _ (FaithfulSMul.algebraMap_injective _ _) (by simp)
  ¬∑ have := IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
    exact traceDual_le_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ

example
    [IsScalarTower A L‚ÇÅ M]
    [IsScalarTower A B‚ÇÇ M]
    [Module.Free A B‚ÇÅ]
    [Module.Finite A B‚ÇÅ]
    [NoZeroSMulDivisors A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C)))
    {Œπ : Type*} (b : Basis Œπ A B‚ÇÅ) :
    span B‚ÇÇ (Set.range (algebraMap B‚ÇÅ M ‚àò b)) =
      LinearMap.range (IsScalarTower.toAlgHom B‚ÇÇ C M) := by
  classical
  have : Finite Œπ := Module.Finite.finite_basis b
  have h_main : (traceDual B‚ÇÇ L‚ÇÇ (1 : Submodule C M)).restrictScalars B‚ÇÇ =
      span B‚ÇÇ (algebraMap L‚ÇÅ M '' (traceDual A K (1 : Submodule B‚ÇÅ L‚ÇÅ))) :=
    (traceDual_eq_span_traceDual A C B‚ÇÇ B‚ÇÅ h‚ÇÅ.symm (by rwa [sup_comm]) h‚ÇÉ.symm).symm
  convert congr_arg (Submodule.restrictScalars B‚ÇÇ) <|
    congr_arg coeToSubmodule <| (1 : FractionalIdeal C‚Å∞ M).dual_dual B‚ÇÇ L‚ÇÇ
  ¬∑ rw [coe_dual _ _ (by simp), coe_dual_one]
    rw [restrictScalars_traceDual, h_main]
    have : IsLocalization (algebraMapSubmonoid B‚ÇÅ A‚Å∞) L‚ÇÅ :=
      IsIntegralClosure.isLocalization A K L‚ÇÅ B‚ÇÅ
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have := Submodule.traceDual_span_of_basis (A := A) (1 : Submodule B‚ÇÅ L‚ÇÅ) b‚ÇÅ ?_
    ¬∑ rw [‚Üê Submodule.coe_restrictScalars A, this, ‚Üê IsScalarTower.coe_toAlgHom' A L‚ÇÅ M,
        ‚Üê map_coe, map_span, span_span_of_tower, IsScalarTower.coe_toAlgHom', ‚Üê Set.range_comp]
      have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
        simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
      have : algebraMap L‚ÇÅ M ‚àò b‚ÇÅ.traceDual = (h‚ÇÅ.basisOfBasisLeft h‚ÇÇ' b‚ÇÅ).traceDual := by
        rw [eq_comm, Basis.traceDual_eq_iff]
        intro i j
        simp only [Function.comp_apply, basisOfBasisLeft_apply, traceForm_apply]
        rw [‚Üê map_mul, h‚ÇÅ.symm.trace_algebraMap_eq (by rwa [sup_comm])]
        rw [b‚ÇÅ.trace_traceDual_mul i j, MonoidWithZeroHom.map_ite_one_zero]
      rw [this, (traceForm L‚ÇÇ M).dualSubmodule_span_of_basis (traceForm_nondegenerate L‚ÇÇ M),
        ‚Üê Basis.traceDual_def, Basis.traceDual_traceDual]
      congr!
      ext
      rw [Function.comp_apply, basisOfBasisLeft_apply, Basis.localizationLocalization_apply,
        ‚Üê IsScalarTower.algebraMap_apply]
    ¬∑ rw [b.localizationLocalization_span K A‚Å∞ L‚ÇÅ]
      ext; simp
  ¬∑ ext; simp

#exit


    have : IsLocalization (algebraMapSubmonoid B‚ÇÅ A‚Å∞) L‚ÇÅ :=
      IsIntegralClosure.isLocalization A K L‚ÇÅ B‚ÇÅ
    have : IsLocalization (algebraMapSubmonoid C B‚ÇÅ‚Å∞) M :=
      IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : algebraMap B‚ÇÅ M ‚àò b = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ) := by
      sorry
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    sorry
  ¬∑ ext; simp


#exit
  classical
  have : Finite Œπ := sorry
  convert congr_arg (Submodule.restrictScalars B‚ÇÇ) <|
    congr_arg coeToSubmodule <| (1 : FractionalIdeal C‚Å∞ M).dual_dual B‚ÇÇ L‚ÇÇ
  ¬∑ have : IsLocalization (algebraMapSubmonoid B‚ÇÅ A‚Å∞) L‚ÇÅ :=
      IsIntegralClosure.isLocalization A K L‚ÇÅ B‚ÇÅ
    have : IsLocalization (algebraMapSubmonoid C B‚ÇÅ‚Å∞) M :=
      IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : algebraMap B‚ÇÅ M ‚àò b = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ) := by
      sorry
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    sorry


    rw [Basis.traceDual_traceDual] at this
    rw [‚Üê this]
    congr

    have h := congr_arg ((‚Üë) : Ideal C ‚Üí FractionalIdeal C‚Å∞ M)
        (differentIdeal_map_eq_differentIdeal h‚ÇÅ h‚ÇÇ h‚ÇÉ)
    rw [‚Üê inv_inj, coeIdeal_differentIdeal B‚ÇÇ L‚ÇÇ, ‚Üê extended_coeIdeal_eq_map_algebraMap L‚ÇÅ M,
      ‚Üê extended_inv, coeIdeal_differentIdeal A K, inv_inv, inv_inv] at h
    replace h := congr_arg coeToSubmodule <| h
    rw [coe_extended_eq_span, coe_dual_one, ‚Üê coeToSet_coeToSubmodule, coe_dual_one] at h
    have := IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÅ‚Å∞ C L‚ÇÅ M
    erw [‚Üê this] at h
    rw [coe_dual, coe_dual_one]
    rw [‚Üê h]
    congr

#exit
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : (traceDual A K (1 : Submodule B‚ÇÅ L‚ÇÅ) : Set L‚ÇÅ) = span A (Set.range b‚ÇÅ.traceDual) := by
      rw [‚Üê Submodule.traceDual_span_of_basis A (1 : Submodule B‚ÇÅ L‚ÇÅ),
        Submodule.coe_restrictScalars]
      rw [b.localizationLocalization_span K A‚Å∞ L‚ÇÅ]
      ext; simp
    rw [this, ‚Üê IsScalarTower.coe_toAlgHom' A L‚ÇÅ M, ‚Üê map_coe, map_span, span_span_of_tower]
    rw [IsScalarTower.coe_toAlgHom', ‚Üê Set.range_comp]
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    have : algebraMap L‚ÇÅ M ‚àò b‚ÇÅ.traceDual = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual := by
      rw [eq_comm, Basis.traceDual_eq_iff]
      intro i j
      simp only [Function.comp_apply, basisOfBasisRight_apply, traceForm_apply]
      rw [‚Üê map_mul, h‚ÇÅ.symm.trace_algebraMap_eq (by rwa [sup_comm])]
      rw [b‚ÇÅ.trace_traceDual_mul i j, MonoidWithZeroHom.map_ite_one_zero]
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    ¬∑ rw [this]
      congr
      simp
      congr!
      ext
      simp
      sorry
    ¬∑ ext
      simp
      sorry
    ¬∑ simp
    ¬∑ sorry
  ¬∑ ext
    simp [mem_one_iff]

end IntermediateField.LinearDisjoint
