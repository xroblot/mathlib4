import Mathlib

open Algebra

theorem IsPrimitiveRoot.mul_isPrimitiveRoot_of_coprime {M : Type*} [CommMonoid M] {k : ‚Ñï}
    {Œ∂ Œ∂' : M} {k' : ‚Ñï} (hŒ∂ : IsPrimitiveRoot Œ∂ k) (hŒ∂' : IsPrimitiveRoot Œ∂' k')
    (h : k.Coprime k') :
    IsPrimitiveRoot (Œ∂ * Œ∂') (k * k') := by
  convert IsPrimitiveRoot.orderOf (Œ∂ * Œ∂')
  rw [hŒ∂.eq_orderOf, hŒ∂'.eq_orderOf] at h ‚ä¢
  exact (Commute.orderOf_mul_eq_mul_orderOf_of_coprime (Commute.all Œ∂ Œ∂') h).symm

variable {A B : Type*} [CommRing A] [CommRing B] [Algebra A B] (T‚ÇÅ T‚ÇÇ : Subalgebra A B)
  (n‚ÇÅ n‚ÇÇ : ‚Ñï) [hcycl‚ÇÅ : IsCyclotomicExtension {n‚ÇÅ} A T‚ÇÅ] [hcycl‚ÇÇ : IsCyclotomicExtension {n‚ÇÇ} A T‚ÇÇ]

theorem Subalgebra.isCyclotomicExtension_iff [IsDomain B] {T : Subalgebra A B} {S : Set ‚Ñï} :
    IsCyclotomicExtension S A T ‚Üî
      (‚àÄ n, n ‚àà S ‚Üí n ‚â† 0 ‚Üí ‚àÉ b : B, IsPrimitiveRoot b n) ‚àß
        T = adjoin A {b : B | ‚àÉ s ‚àà S, s ‚â† 0 ‚àß b ^ s = 1} := by
  rw [IsCyclotomicExtension.iff_adjoin_eq_top, eq_comm]
  have := Subalgebra.map_injective (f := IsScalarTower.toAlgHom A T B)
    (FaithfulSMul.algebraMap_injective T B)
  rw [‚Üê this.eq_iff, AlgHom.map_adjoin, IsScalarTower.coe_toAlgHom',
    show Subalgebra.map (IsScalarTower.toAlgHom A T B) ‚ä§ = T by aesop]
  constructor
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    rw [h‚ÇÇ]
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro n hn‚ÇÅ hn‚ÇÇ
      obtain ‚ü®Œ∂, hŒ∂‚ü© := h‚ÇÅ n hn‚ÇÅ hn‚ÇÇ
      exact ‚ü®algebraMap T B Œ∂, hŒ∂.map_of_injective (FaithfulSMul.algebraMap_injective T B)‚ü©
    congr
    ext x
    simp_rw [Set.mem_image, Set.mem_setOf_eq]
    constructor
    ¬∑ rintro ‚ü®_, ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hx‚ü©, rfl‚ü©
      exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, by rw [‚Üê map_pow, hx, map_one]‚ü©
    ¬∑ rintro ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hx‚ü©
      obtain ‚ü®Œ∂, hŒ∂‚ü© := h‚ÇÅ n hn‚ÇÅ hn‚ÇÇ
      have hŒ∂' := hŒ∂.map_of_injective (FaithfulSMul.algebraMap_injective T B)
      have := NeZero.mk hn‚ÇÇ
      obtain ‚ü®k, _, rfl‚ü© := hŒ∂'.eq_pow_of_pow_eq_one hx
      exact ‚ü®Œ∂ ^ k, ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, by rw [pow_right_comm, hŒ∂.pow_eq_one, one_pow]‚ü©, rfl‚ü©
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro n hn‚ÇÅ hn‚ÇÇ
      obtain ‚ü®Œ∂, hŒ∂‚ü© := h‚ÇÅ n hn‚ÇÅ hn‚ÇÇ
      refine ‚ü®‚ü®Œ∂, ?_‚ü©, IsPrimitiveRoot.coe_submonoidClass_iff.mp hŒ∂‚ü©
      rw [h‚ÇÇ]
      apply subset_adjoin -- Algebra.mem_adjoin_of_mem
      exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hŒ∂.pow_eq_one‚ü©
    ¬∑ nth_rewrite 1 [h‚ÇÇ]
      congr
      ext x
      simp_rw [Set.mem_image, Set.mem_setOf_eq]
      constructor
      ¬∑ rintro ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hx‚ü©
        have := NeZero.mk hn‚ÇÇ
        obtain ‚ü®Œ∂, hŒ∂‚ü© := h‚ÇÅ n hn‚ÇÅ hn‚ÇÇ
        obtain ‚ü®k, _, rfl‚ü© := hŒ∂.eq_pow_of_pow_eq_one hx
        refine ‚ü®‚ü®Œ∂ ^ k, ?_‚ü©, ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, (Subalgebra.coe_eq_one T).mp hx‚ü©, rfl‚ü©
        rw [h‚ÇÇ]
        apply subset_adjoin
        refine ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hx‚ü©
      ¬∑ rintro ‚ü®_, ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, hx‚ü©, rfl‚ü©
        exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ, by rw [‚Üê map_pow, hx, map_one]‚ü©

variable {n‚ÇÅ n‚ÇÇ} in
theorem Subalgebra.isCyclotomicExtension_le_of_dvd [IsDomain B] (h : n‚ÇÅ ‚à£ n‚ÇÇ) (h' : n‚ÇÇ ‚â† 0) :
    T‚ÇÅ ‚â§ T‚ÇÇ := by
  rw [Subalgebra.isCyclotomicExtension_iff] at hcycl‚ÇÅ hcycl‚ÇÇ
  rw [hcycl‚ÇÅ.2, hcycl‚ÇÇ.2]
  apply adjoin_mono
  rintro x ‚ü®n, rfl, hn‚ÇÅ, hx‚ü©
  obtain ‚ü®c, rfl‚ü© := h
  exact ‚ü®n * c, rfl, h', by rw [pow_mul, hx, one_pow]‚ü©

theorem Subalgebra.isCyclotomicExtension_lcm_sup [NeZero n‚ÇÅ] [NeZero n‚ÇÇ] :
    IsCyclotomicExtension {n‚ÇÅ.lcm n‚ÇÇ} A (T‚ÇÅ ‚äî T‚ÇÇ : Subalgebra A B) where
  exists_isPrimitiveRoot := by
    intro n h hn
    obtain ‚ü®Œ∂‚ÇÅ, hŒ∂‚ÇÅ‚ü© := hcycl‚ÇÅ.1 rfl (NeZero.ne n‚ÇÅ)
    obtain ‚ü®Œ∂‚ÇÇ, hŒ∂‚ÇÇ‚ü© := hcycl‚ÇÇ.1 rfl (NeZero.ne n‚ÇÇ)
    let _ : Algebra T‚ÇÅ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := (Subalgebra.inclusion le_sup_left).toAlgebra
    let _ : Algebra T‚ÇÇ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := (Subalgebra.inclusion le_sup_right).toAlgebra
    have : FaithfulSMul T‚ÇÅ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := Subalgebra.inclusion.faithfulSMul le_sup_left
    have : FaithfulSMul T‚ÇÇ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := Subalgebra.inclusion.faithfulSMul le_sup_right
    replace hŒ∂‚ÇÅ := hŒ∂‚ÇÅ.map_of_injective (FaithfulSMul.algebraMap_injective T‚ÇÅ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ))
    replace hŒ∂‚ÇÇ := hŒ∂‚ÇÇ.map_of_injective (FaithfulSMul.algebraMap_injective T‚ÇÇ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ))
    exact ‚ü®_, h ‚ñ∏ IsPrimitiveRoot.pow_mul_pow_lcm hŒ∂‚ÇÅ hŒ∂‚ÇÇ (NeZero.ne n‚ÇÅ) (NeZero.ne n‚ÇÇ)‚ü©
  adjoin_roots := by
    rintro ‚ü®x, hx‚ü©
    induction hx using adjoin_induction with
    | mem x h =>
        let _ : Algebra T‚ÇÅ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := (Subalgebra.inclusion le_sup_left).toAlgebra
        let _ : Algebra T‚ÇÇ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ) := (Subalgebra.inclusion le_sup_right).toAlgebra
        -- Use IsCyclotomicExtension.iff_singleton
        obtain h | h := h
        ¬∑ have := Set.mem_image_of_mem (IsScalarTower.toAlgHom A T‚ÇÅ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ)) <| hcycl‚ÇÅ.2 ‚ü®_, h‚ü©
          rw [‚Üê Subalgebra.coe_map, ‚Üê adjoin_algebraMap, SetLike.mem_coe] at this
          refine adjoin_mono ?_ this
          rintro _ ‚ü®z, ‚ü®n‚ÇÅ, rfl, ‚ü®hn‚ÇÅ, hn‚ÇÅ'‚ü©‚ü©, rfl‚ü©
          refine ‚ü®_, rfl, Nat.lcm_ne_zero hn‚ÇÅ (NeZero.ne n‚ÇÇ), ?_‚ü©
          obtain ‚ü®c, hc‚ü© := Nat.dvd_lcm_left n‚ÇÅ n‚ÇÇ
          rw [‚Üê map_pow, hc, pow_mul, hn‚ÇÅ', one_pow, map_one]
        ¬∑ have := Set.mem_image_of_mem (IsScalarTower.toAlgHom A T‚ÇÇ ‚Ü•(T‚ÇÅ ‚äî T‚ÇÇ)) <| hcycl‚ÇÇ.2 ‚ü®_, h‚ü©
          rw [‚Üê Subalgebra.coe_map, ‚Üê adjoin_algebraMap, SetLike.mem_coe] at this
          refine adjoin_mono ?_ this
          rintro _ ‚ü®z, ‚ü®n‚ÇÇ, rfl, ‚ü®hn‚ÇÇ, hn‚ÇÇ'‚ü©‚ü©, rfl‚ü©
          refine ‚ü®_, rfl,  Nat.lcm_ne_zero (NeZero.ne n‚ÇÅ) hn‚ÇÇ, ?_‚ü©
          obtain ‚ü®c, hc‚ü© := Nat.dvd_lcm_right n‚ÇÅ n‚ÇÇ
          rw [‚Üê map_pow, hc, pow_mul, hn‚ÇÇ', one_pow, map_one]
    | algebraMap r =>
        rw [Algebra.mem_adjoin_iff]
        apply Subring.subset_closure
        apply Set.mem_union_left
        exact Set.mem_range_self r
    | add _ _ _ _ hx hy => simpa [AddMemClass.mk_add_mk] using Subalgebra.add_mem  _ hx hy
    | mul _ _ _ _ hx hy => simpa [MulMemClass.mk_mul_mk] using Subalgebra.mul_mem  _ hx hy

open nonZeroDivisors NumberField

-- theorem Submodule.span_mono_left {R S M : Type*} [Semiring R] [Semiring S] [AddCommMonoid M]
--     [Module R M] [Module S M] [SMul R S] [IsScalarTower R S M] {s : Set M} :
--     (span R s : Set M) ‚â§ span S s := by
--   rw [‚Üê Submodule.span_span_of_tower R S]
--   exact Submodule.subset_span

-- theorem differentIdeal_ne_bot' (A K B L : Type*) [CommRing A] [Field K] [Algebra A K]
--     [IsFractionRing A K] [CommRing B] [Field L] [Algebra B L] [IsFractionRing B L]
--     [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A B L] [IsScalarTower A K L]
--     [IsDomain A] [IsIntegrallyClosed A] [IsDedekindDomain B] [NoZeroSMulDivisors A B]
--     [Module.Finite A B] [Algebra.IsSeparable K L] :
--     differentIdeal A B ‚â† ‚ä• := by
--   have : IsLocalization (Algebra.algebraMapSubmonoid B A‚Å∞) L :=
--     IsIntegralClosure.isLocalization _ K _ _
--   have : FiniteDimensional K L := Module.Finite_of_isLocalization A B _ _ A‚Å∞
--   rw [ne_eq, ‚Üê FractionalIdeal.coeIdeal_inj (K := L), coeIdeal_differentIdeal (K := K)]
--   simp

open nonZeroDivisors Algebra FractionalIdeal
-- section numberfield

-- open NumberField

-- variable (K L M : Type*) [Field K] [NumberField K] [Field L] [NumberField L] [Field M]
--   [NumberField M] [Algebra K L] [Algebra K M] [Algebra L M] [IsScalarTower K L M]

-- theorem differentIdeal_eq_differentIdeal_mul_differentIdeal' :
--     differentIdeal (ùìû K) (ùìû M) =
--        differentIdeal (ùìû L) (ùìû M) *
--         (differentIdeal (ùìû K) (ùìû L)).map (algebraMap (ùìû L) (ùìû M)) :=
--   differentIdeal_eq_differentIdeal_mul_differentIdeal (ùìû K) K L (ùìû L) (ùìû M) M

-- end numberfield

namespace IntermediateField.LinearDisjoint

open Submodule IntermediateField

variable {A K C M : Type*} [CommRing A] [Field K] [CommRing C] [Field M] [Algebra K M]
  [Algebra A K] [IsFractionRing A K] [Algebra C M] [Algebra A M] [IsScalarTower A K M]
  {L‚ÇÅ L‚ÇÇ : IntermediateField K M} {B‚ÇÅ B‚ÇÇ : Type*} [CommRing B‚ÇÅ] [CommRing B‚ÇÇ] [Algebra B‚ÇÅ L‚ÇÅ]
  [Algebra B‚ÇÇ L‚ÇÇ] [Algebra A B‚ÇÇ] [Algebra B‚ÇÅ C] [Algebra B‚ÇÇ C] [Algebra B‚ÇÅ M] [Algebra B‚ÇÇ M]
  [IsScalarTower A B‚ÇÇ L‚ÇÇ] [IsScalarTower B‚ÇÅ C M] [IsScalarTower B‚ÇÇ C M] [IsScalarTower B‚ÇÅ L‚ÇÅ M]
  [IsScalarTower B‚ÇÇ L‚ÇÇ M] [Algebra.IsSeparable K M] [FiniteDimensional K M]

-- variable (A C B‚ÇÅ B‚ÇÇ) in
-- theorem traceDual_le_span_traceDual' [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ]
--     [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
--     (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
--     traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) ‚â§
--       span C (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) := by
--   intro x hx
--   let b‚ÇÇ := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
--   have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
--     simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
--   let bM : Basis _ L‚ÇÅ M := h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ.traceDual
--   rw [‚Üê bM.sum_repr x]
--   refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
--   rsuffices ‚ü®c, hc‚ü© : bM.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
--     have : (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual = bM := by
--       refine (DFunLike.ext'_iff.trans Basis.traceDual_eq_iff).mpr fun _ _ ‚Ü¶ ?_
--       rw [h‚ÇÅ.basisOfBasisRight_apply, h‚ÇÅ.basisOfBasisRight_apply, traceForm_apply, ‚Üê map_mul,
--         h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b‚ÇÇ.trace_traceDual_mul, MonoidWithZeroHom.map_ite_one_zero]
--     rw [‚Üê this, (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual_repr_apply x i]
--     refine mem_traceDual.mp hx _ ?_
--     rw [mem_one, h‚ÇÅ.basisOfBasisRight_apply, Basis.localizationLocalization_apply,
--       ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ C M]
--     exact ‚ü®_, rfl‚ü©
--   rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ, algebra_compatible_smul C]
--   refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
--   refine ‚ü®b‚ÇÇ.traceDual i, ?_, by rw [h‚ÇÅ.basisOfBasisRight_apply]‚ü©
--   rw [SetLike.mem_coe, ‚Üê restrictScalars_mem A, traceDual_span_of_basis A _ b‚ÇÇ
--     (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
--   exact Submodule.subset_span <| Set.mem_range_self i

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem traceDual_le_span_traceDual [IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ]
    [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
    (traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M)).restrictScalars B‚ÇÅ ‚â§
      span B‚ÇÅ (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) := by
  intro x hx
  let b‚ÇÇ := (Module.Free.chooseBasis A B‚ÇÇ).localizationLocalization K A‚Å∞ L‚ÇÇ
  have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
    simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
  let bM : Basis _ L‚ÇÅ M := h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ.traceDual
  rw [‚Üê bM.sum_repr x]
  refine Submodule.sum_mem _ fun i _ ‚Ü¶ ?_
  rsuffices ‚ü®c, hc‚ü© : bM.repr x i ‚àà (algebraMap B‚ÇÅ L‚ÇÅ).range := by
    have : (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual = bM := by
      refine (DFunLike.ext'_iff.trans Basis.traceDual_eq_iff).mpr fun _ _ ‚Ü¶ ?_
      rw [h‚ÇÅ.basisOfBasisRight_apply, h‚ÇÅ.basisOfBasisRight_apply, traceForm_apply, ‚Üê map_mul,
        h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ, b‚ÇÇ.trace_traceDual_mul, MonoidWithZeroHom.map_ite_one_zero]
    rw [‚Üê this, (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÇ).traceDual_repr_apply x i]
    refine mem_traceDual.mp hx _ ?_
    rw [mem_one, h‚ÇÅ.basisOfBasisRight_apply, Basis.localizationLocalization_apply,
      ‚Üê IsScalarTower.algebraMap_apply, IsScalarTower.algebraMap_apply B‚ÇÇ C M]
    exact ‚ü®_, rfl‚ü©
  rw [‚Üê hc, ‚Üê algebra_compatible_smul L‚ÇÅ]
  refine Submodule.smul_mem _ _ (Submodule.subset_span ?_)
  refine ‚ü®b‚ÇÇ.traceDual i, ?_, by rw [h‚ÇÅ.basisOfBasisRight_apply]‚ü©
  rw [SetLike.mem_coe, ‚Üê restrictScalars_mem A, traceDual_span_of_basis A _ b‚ÇÇ
    (by rw [Basis.localizationLocalization_span K A‚Å∞ L‚ÇÇ]; ext; simp)]
  exact Submodule.subset_span <| Set.mem_range_self i

variable [IsDomain A] [IsDomain B‚ÇÅ]
  [IsIntegrallyClosed A] [IsIntegrallyClosed B‚ÇÅ] [IsDedekindDomain B‚ÇÇ] [IsDedekindDomain C]
  [IsFractionRing B‚ÇÅ L‚ÇÅ] [IsFractionRing B‚ÇÇ L‚ÇÇ] [IsFractionRing C M]
  [IsIntegralClosure B‚ÇÇ A L‚ÇÇ] [IsIntegralClosure C B‚ÇÇ M] [IsIntegralClosure C B‚ÇÅ M]
  [NoZeroSMulDivisors B‚ÇÅ C] [NoZeroSMulDivisors B‚ÇÇ C]

-- variable (A B‚ÇÅ B‚ÇÇ C) in
-- -- That's essentially a weaker version of `traceDual_le_span_traceDual'`
-- theorem differentIdeal_dvd_differentIdeal_map [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ]
--     (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§) :
--     differentIdeal B‚ÇÅ C ‚à£ (differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C) := by
--   have := IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
--   have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
--   rw [Ideal.dvd_iff_le, ‚Üê coeIdeal_le_coeIdeal' C‚Å∞ (P := M) le_rfl, coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ,
--     le_inv_comm _ (by simp), ‚Üê extended_coeIdeal_eq_map_algebraMap L‚ÇÇ M, ‚Üê extended_inv,
--     coeIdeal_differentIdeal A K, inv_inv, ‚Üê coe_le_coe, coe_dual_one, coe_extended_eq_span,
--     ‚Üê coeToSet_coeToSubmodule, coe_dual_one]
--   ¬∑ convert traceDual_le_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
--     exact (IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÇ‚Å∞ C L‚ÇÇ M).symm
--   ¬∑ exact coeIdeal_ne_zero.mpr <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ
--   ¬∑ exact coeIdeal_ne_zero.mpr <| Ideal.map_ne_bot_of_ne_bot <| differentIdeal_ne_bot' A K B‚ÇÇ L‚ÇÇ

variable [Algebra A B‚ÇÅ] [IsDedekindDomain B‚ÇÅ] [NoZeroSMulDivisors A B‚ÇÅ]
  [Algebra A C] [IsScalarTower A B‚ÇÅ L‚ÇÅ] [IsScalarTower A C M] [IsIntegralClosure B‚ÇÅ A L‚ÇÅ]
  [IsIntegralClosure C A M] [NoZeroSMulDivisors A C] [IsScalarTower K L‚ÇÇ M] [IsScalarTower K L‚ÇÅ M]

-- theorem differentIdeal_map_eq_differentIdeal [Module.Free A B‚ÇÅ] [Module.Finite A B‚ÇÅ]
--     [Module.Free A B‚ÇÇ] [Module.Finite A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
--     (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
--       ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C))) :
--     (differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C) = differentIdeal B‚ÇÇ C := by
--   have := IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
--   have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
--   have main := (differentIdeal_eq_differentIdeal_mul_differentIdeal
--     A K L‚ÇÅ B‚ÇÅ C M).symm.trans (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÇ B‚ÇÇ C M)
--   apply dvd_antisymm'
--   ¬∑ have h' : IsCoprime (differentIdeal B‚ÇÇ C) (differentIdeal B‚ÇÅ C) := by
--       refine (h‚ÇÉ.of_isCoprime_of_dvd_right ?_).of_isCoprime_of_dvd_left ?_
--       ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ
--       ¬∑ exact differentIdeal_dvd_differentIdeal_map A C B‚ÇÇ B‚ÇÅ h‚ÇÅ.symm (by rwa [sup_comm])
--     exact h'.dvd_of_dvd_mul_left (dvd_of_mul_right_eq _ main.symm)
--   ¬∑ exact h‚ÇÉ.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ main)

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem traceDual_eq_span_traceDual [Module.Finite A B‚ÇÇ] [Module.Free A B‚ÇÇ]
    [NoZeroSMulDivisors A B‚ÇÇ] (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C))) :
    span B‚ÇÅ (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) =
      (traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M)).restrictScalars B‚ÇÅ := by
  apply le_antisymm
  ¬∑ suffices span C (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) ‚â§
        traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M) by
      refine SetLike.coe_subset_coe.mp (subset_trans ?_ this)
      rw [‚Üê Submodule.span_span_of_tower B‚ÇÅ C]
      exact Submodule.subset_span
    have := IsIntegralClosure.isLocalization B‚ÇÇ L‚ÇÇ M C
    rw [‚Üê coe_dual_one, coeToSet_coeToSubmodule, ‚Üê coe_extended_eq_span_algebraMap, ‚Üê coe_dual_one,
      coe_le_coe, ‚Üê inv_inv (dual B‚ÇÅ L‚ÇÅ 1), ‚Üê le_inv_comm (inv_ne_zero (by simp)),
      ‚Üê extended_inv _ (by simp), ‚Üê coeIdeal_differentIdeal A K, ‚Üê coeIdeal_differentIdeal B‚ÇÅ L‚ÇÅ,
      extended_coeIdeal_eq_map_algebraMap L‚ÇÇ M, coeIdeal_le_coeIdeal' _ le_rfl, ‚Üê Ideal.dvd_iff_le]
    ¬∑ have := (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÇ B‚ÇÇ C M).symm.trans
          (differentIdeal_eq_differentIdeal_mul_differentIdeal A K L‚ÇÅ B‚ÇÅ C M)
      exact h‚ÇÉ.symm.dvd_of_dvd_mul_right (dvd_of_mul_left_eq _ this)
    ¬∑ exact extended_ne_zero _ _ (FaithfulSMul.algebraMap_injective _ _) (by simp)
  ¬∑ have := IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
    exact traceDual_le_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ

variable (A C B‚ÇÅ B‚ÇÇ) in
theorem span_eq_range
    [IsScalarTower A L‚ÇÇ M]
    [IsScalarTower A B‚ÇÅ M]
    [Module.Free A B‚ÇÇ]
    [Module.Finite A B‚ÇÇ]
    [NoZeroSMulDivisors A B‚ÇÇ]
    (h‚ÇÅ : L‚ÇÅ.LinearDisjoint L‚ÇÇ) (h‚ÇÇ : L‚ÇÅ ‚äî L‚ÇÇ = ‚ä§)
    (h‚ÇÉ : IsCoprime ((differentIdeal A B‚ÇÅ).map (algebraMap B‚ÇÅ C))
      ((differentIdeal A B‚ÇÇ).map (algebraMap B‚ÇÇ C)))
    {Œπ : Type*} (b : Basis Œπ K L‚ÇÇ)
    (hb : span A (Set.range b) = (1 : Submodule B‚ÇÇ L‚ÇÇ).restrictScalars A) :
    span B‚ÇÅ (Set.range (algebraMap L‚ÇÇ M ‚àò b)) =
      LinearMap.range (IsScalarTower.toAlgHom B‚ÇÅ C M) := by
  classical
  have : Finite Œπ := Module.Finite.finite_basis b
  have h_main : (traceDual B‚ÇÅ L‚ÇÅ (1 : Submodule C M)).restrictScalars B‚ÇÅ =
      span B‚ÇÅ (algebraMap L‚ÇÇ M '' (traceDual A K (1 : Submodule B‚ÇÇ L‚ÇÇ))) :=
    (traceDual_eq_span_traceDual A C B‚ÇÅ B‚ÇÇ h‚ÇÅ h‚ÇÇ h‚ÇÉ).symm
  convert congr_arg (Submodule.restrictScalars B‚ÇÅ) <|
    congr_arg coeToSubmodule <| (1 : FractionalIdeal C‚Å∞ M).dual_dual B‚ÇÅ L‚ÇÅ
  ¬∑ rw [coe_dual _ _ (by simp), coe_dual_one]
    rw [restrictScalars_traceDual, h_main]
--    have : IsLocalization (algebraMapSubmonoid B‚ÇÇ A‚Å∞) L‚ÇÇ :=
--      IsIntegralClosure.isLocalization A K L‚ÇÇ B‚ÇÇ
--    let b‚ÇÇ := b.localizationLocalization K A‚Å∞ L‚ÇÇ
    have := Submodule.traceDual_span_of_basis A (1 : Submodule B‚ÇÇ L‚ÇÇ) b ?_
    ¬∑ rw [‚Üê Submodule.coe_restrictScalars A, this, ‚Üê IsScalarTower.coe_toAlgHom' A L‚ÇÇ M,
        ‚Üê map_coe, map_span, span_span_of_tower, IsScalarTower.coe_toAlgHom', ‚Üê Set.range_comp]
      have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
        simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
      have : algebraMap L‚ÇÇ M ‚àò b.traceDual = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b).traceDual := by
        rw [eq_comm, Basis.traceDual_eq_iff]
        intro i j
        simp only [Function.comp_apply, basisOfBasisRight_apply, traceForm_apply]
        rw [‚Üê map_mul, h‚ÇÅ.trace_algebraMap_eq h‚ÇÇ]
        rw [b.trace_traceDual_mul i j, MonoidWithZeroHom.map_ite_one_zero]
      rw [this, (traceForm L‚ÇÅ M).dualSubmodule_span_of_basis (traceForm_nondegenerate L‚ÇÅ M),
        ‚Üê Basis.traceDual_def, Basis.traceDual_traceDual]
      congr!
      ext
      rw [Function.comp_apply, basisOfBasisRight_apply]
    ¬∑ rw [hb]
  ¬∑ ext; simp

end LinearDisjoint
section NumberField

open NumberField Submodule

variable {K : Type*} [Field K] [NumberField K] (F‚ÇÅ F‚ÇÇ : IntermediateField ‚Ñö K)
  (h‚ÇÅ : F‚ÇÅ.LinearDisjoint F‚ÇÇ) (h‚ÇÇ : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§) (h‚ÇÉ : IsCoprime (discr F‚ÇÅ) (discr F‚ÇÇ))

example : (algebraMap (ùìû F‚ÇÅ) (ùìû K)).range ‚äî (algebraMap (ùìû F‚ÇÇ) (ùìû K)).range = ‚ä§ := by
    let b‚ÇÇ := integralBasis F‚ÇÇ
    have : span (ùìû F‚ÇÅ) (Set.range (algebraMap F‚ÇÇ K ‚àò b‚ÇÇ)) =
        LinearMap.range (IsScalarTower.toAlgHom (ùìû F‚ÇÅ) (ùìû K) K) := by
      apply IntermediateField.LinearDisjoint.span_eq_range ‚Ñ§ (ùìû K) (ùìû F‚ÇÅ) (ùìû F‚ÇÇ) h‚ÇÅ h‚ÇÇ
      ¬∑ obtain ‚ü®u, v, h‚ü© := h‚ÇÉ
        rw [Ideal.isCoprime_iff_exists]
        refine ‚ü®algebraMap ‚Ñ§ (ùìû K) (u * discr F‚ÇÅ), ?_,
          algebraMap ‚Ñ§ (ùìû K) (v * discr F‚ÇÇ), ?_, by rw [‚Üê map_add, h, map_one]‚ü©
        ¬∑ rw [IsScalarTower.algebraMap_apply ‚Ñ§ (ùìû F‚ÇÅ) (ùìû K)]
          apply Ideal.mem_map_of_mem
          simp only [algebraMap_int_eq, eq_intCast, Int.cast_mul]
          exact Ideal.mul_mem_left _ _ <| discr_mem_differentIdeal
        ¬∑ rw [IsScalarTower.algebraMap_apply ‚Ñ§ (ùìû F‚ÇÇ) (ùìû K)]
          apply Ideal.mem_map_of_mem
          simp only [algebraMap_int_eq, eq_intCast, Int.cast_mul]
          exact Ideal.mul_mem_left _ _ <| discr_mem_differentIdeal
      ¬∑ ext; simp [b‚ÇÇ, mem_span_integralBasis]
    sorry

end NumberField

end IntermediateField

section cyclotomic

open Ideal

open UniqueFactorizationMonoid in
example {A B : Type*} (K L : Type*) [CommRing A] [CommRing B] [Field K] [Field L]
    [IsDedekindDomain A] [Algebra A K] [IsFractionRing A K] [Module.Free ‚Ñ§ A] [Module.Finite ‚Ñ§ A]
    [IsDedekindDomain B] [Algebra B L] [IsFractionRing B L] [Module.Free ‚Ñ§ B] [Module.Finite ‚Ñ§ B]
    [Algebra A B] [Algebra K L] [Algebra A L] [IsScalarTower A B L] [IsScalarTower A K L]
    [NoZeroSMulDivisors A B]
    [IsIntegralClosure B A L] [Algebra.IsSeparable K L] [FiniteDimensional K L] (I : Ideal A) :
    absNorm (map (algebraMap A B) I) = absNorm I ^ Module.finrank K L := by
  classical
  have : Module.Finite A B := IsIntegralClosure.finite A K L B
  by_cases hI : I = ‚ä•
  ¬∑ simp [hI, zero_pow, Module.finrank_pos]
  rw [‚Üê prod_normalizedFactors_eq_self hI]
  refine Multiset.prod_induction
    (fun I ‚Ü¶  absNorm (map (algebraMap A B) I) = absNorm I ^ Module.finrank K L) _ ?_ ?_ ?_
  ¬∑ intro I J hI hJ
    rw [map_mul, ‚Üê mapHom_apply, map_mul, map_mul, mapHom_apply, mapHom_apply, hI, hJ, mul_pow]
  ¬∑ simpa using Ideal.map_top _
  ¬∑ intro P hP
    have hP' : P ‚â† ‚ä• := by
      contrapose! hP
      simpa [hP] using zero_notMem_normalizedFactors _
    rw [Ideal.mem_normalizedFactors_iff hI] at hP
    have : P.IsMaximal := Ring.DimensionLEOne.maximalOfPrime hP' hP.1
    let p := absNorm (under ‚Ñ§ P)
    have hp : Prime (p : ‚Ñ§) := Int.prime_absNorm_under _ hP.1
      (Int.absNorm_under_ne_zero (by rwa [ne_eq, Ideal.absNorm_eq_zero_iff]))
    have : Fact (Nat.Prime p) := ‚ü®Nat.prime_iff_prime_int.mpr hp‚ü©
    have : (span {(p : ‚Ñ§)}).IsMaximal := Int.ideal_span_isMaximal_of_prime p
    have : P.LiesOver (span {(p : ‚Ñ§)}) := by simp [liesOver_iff, p]
    nth_rewrite 1 [‚Üê prod_normalizedFactors_eq_self (map_ne_bot_of_ne_bot hP')]
    simp only [Finset.prod_multiset_count, ‚Üê mapHom_apply, map_prod, map_pow]
    have hQ‚ÇÅ {Q} (hQ : Q‚àà (normalizedFactors ((map (algebraMap A B)) P)).toFinset) :
        Ideal.absNorm Q = Ideal.absNorm P ^ P.inertiaDeg Q := by
      rw [Multiset.mem_toFinset, ‚Üê mem_primesOver_iff_mem_normalizedFactors _ hP'] at hQ
      have : Q.LiesOver P := hQ.2
      have : Q.LiesOver (span {(p : ‚Ñ§)}) := LiesOver.trans Q P _
      rw [absNorm_eq_pow_inertiaDeg P hp, absNorm_eq_pow_inertiaDeg Q hp,
        inertiaDeg_algebra_tower _ P, pow_mul]
    have hQ‚ÇÇ {Q} (hQ : Q‚àà (normalizedFactors ((map (algebraMap A B)) P)).toFinset) :
        Multiset.count Q (normalizedFactors ((map (algebraMap A B)) P)) =
          ramificationIdx (algebraMap A B) P Q := by
      rw [IsDedekindDomain.ramificationIdx_eq_normalizedFactors_count (map_ne_bot_of_ne_bot hP')]
      ¬∑ rw [Multiset.mem_toFinset, ‚Üê mem_primesOver_iff_mem_normalizedFactors _ hP'] at hQ
        exact hQ.1
      ¬∑ contrapose! hQ
        simpa [hQ] using zero_notMem_normalizedFactors _
    simp_rw +contextual [mapHom_apply, hQ‚ÇÅ, hQ‚ÇÇ, ‚Üê pow_mul, mul_comm (P.inertiaDeg _)]
    rw [Finset.prod_pow_eq_pow_sum, ‚Üê factors_eq_normalizedFactors,
      sum_ramification_inertia B P K L hP']

#lint




#exit

  sorry

open NumberField Algebra

example {E F : Type*} [Field E] [Field F] [NumberField E] [NumberField F] [Algebra E F] :
    discr E ‚à£ discr F := by
  have := congr_arg Ideal.absNorm
    (differentIdeal_eq_differentIdeal_mul_differentIdeal ‚Ñ§ ‚Ñö E (ùìû E) (ùìû F) F)
  rw [absNorm_differentIdeal (K := F), map_mul, absNorm_differentIdeal (K := E)] at this
  sorry

example {E F : Type*} [Field E] [Field F] [NumberField F] [Algebra E F]
    (K‚ÇÅ K‚ÇÇ : IntermediateField E F) (h : IsCoprime (discr K‚ÇÅ) (discr K‚ÇÇ)) :
    K‚ÇÅ.LinearDisjoint K‚ÇÇ := sorry

variable (n‚ÇÅ n‚ÇÇ : ‚Ñï) {K : Type*} [Field K] [NumberField K] [IsCyclotomicExtension {n‚ÇÅ * n‚ÇÇ} ‚Ñö K]
  (F‚ÇÅ F‚ÇÇ : IntermediateField ‚Ñö K) [IsCyclotomicExtension {n‚ÇÅ} ‚Ñö F‚ÇÅ]
  [IsCyclotomicExtension {n‚ÇÇ} ‚Ñö F‚ÇÇ] {Œ∂‚ÇÅ : F‚ÇÅ} {Œ∂‚ÇÇ : F‚ÇÇ} (hŒ∂‚ÇÅ : IsPrimitiveRoot Œ∂‚ÇÅ n‚ÇÅ)
  (hŒ∂‚ÇÇ : IsPrimitiveRoot Œ∂‚ÇÇ n‚ÇÇ) (hc‚ÇÅ : IsIntegralClosure (adjoin ‚Ñ§ {Œ∂‚ÇÅ}) ‚Ñ§ F‚ÇÅ)
  (hc‚ÇÇ : IsIntegralClosure (adjoin ‚Ñ§ {Œ∂‚ÇÇ}) ‚Ñ§ F‚ÇÇ) (hn : n‚ÇÅ.Coprime n‚ÇÇ)
  (hd : IsCoprime (discr F‚ÇÅ) (discr F‚ÇÇ))

example : ‚àÉ Œ∂ : K, IsPrimitiveRoot Œ∂ (n‚ÇÅ * n‚ÇÇ) := by
  refine ‚ü®algebraMap F‚ÇÅ K Œ∂‚ÇÅ * algebraMap F‚ÇÇ K Œ∂‚ÇÇ, ?_‚ü©
  replace hŒ∂‚ÇÅ := hŒ∂‚ÇÅ.map_of_injective (FaithfulSMul.algebraMap_injective F‚ÇÅ K)
  replace hŒ∂‚ÇÇ := hŒ∂‚ÇÇ.map_of_injective (FaithfulSMul.algebraMap_injective F‚ÇÇ K)
  exact hŒ∂‚ÇÅ.mul_isPrimitiveRoot_of_coprime hŒ∂‚ÇÇ hn

example : F‚ÇÅ ‚äî F‚ÇÇ = ‚ä§ := by
  have : NeZero n‚ÇÅ := sorry
  have : NeZero n‚ÇÇ := sorry
  have :=  Subalgebra.isCyclotomicExtension_lcm_sup F‚ÇÅ.toSubalgebra F‚ÇÇ.toSubalgebra n‚ÇÅ n‚ÇÇ


end cyclotomic



#exit


    have : IsLocalization (algebraMapSubmonoid B‚ÇÅ A‚Å∞) L‚ÇÅ :=
      IsIntegralClosure.isLocalization A K L‚ÇÅ B‚ÇÅ
    have : IsLocalization (algebraMapSubmonoid C B‚ÇÅ‚Å∞) M :=
      IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : algebraMap B‚ÇÅ M ‚àò b = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ) := by
      sorry
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    sorry
  ¬∑ ext; simp


#exit
  classical
  have : Finite Œπ := sorry
  convert congr_arg (Submodule.restrictScalars B‚ÇÇ) <|
    congr_arg coeToSubmodule <| (1 : FractionalIdeal C‚Å∞ M).dual_dual B‚ÇÇ L‚ÇÇ
  ¬∑ have : IsLocalization (algebraMapSubmonoid B‚ÇÅ A‚Å∞) L‚ÇÅ :=
      IsIntegralClosure.isLocalization A K L‚ÇÅ B‚ÇÅ
    have : IsLocalization (algebraMapSubmonoid C B‚ÇÅ‚Å∞) M :=
      IsIntegralClosure.isLocalization B‚ÇÅ L‚ÇÅ M C
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : algebraMap B‚ÇÅ M ‚àò b = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ) := by
      sorry
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    sorry


    rw [Basis.traceDual_traceDual] at this
    rw [‚Üê this]
    congr

    have h := congr_arg ((‚Üë) : Ideal C ‚Üí FractionalIdeal C‚Å∞ M)
        (differentIdeal_map_eq_differentIdeal h‚ÇÅ h‚ÇÇ h‚ÇÉ)
    rw [‚Üê inv_inj, coeIdeal_differentIdeal B‚ÇÇ L‚ÇÇ, ‚Üê extended_coeIdeal_eq_map_algebraMap L‚ÇÅ M,
      ‚Üê extended_inv, coeIdeal_differentIdeal A K, inv_inv, inv_inv] at h
    replace h := congr_arg coeToSubmodule <| h
    rw [coe_extended_eq_span, coe_dual_one, ‚Üê coeToSet_coeToSubmodule, coe_dual_one] at h
    have := IsLocalization.algebraMap_eq_map_map_submonoid B‚ÇÅ‚Å∞ C L‚ÇÅ M
    erw [‚Üê this] at h
    rw [coe_dual, coe_dual_one]
    rw [‚Üê h]
    congr

#exit
    let b‚ÇÅ := b.localizationLocalization K A‚Å∞ L‚ÇÅ
    have : (traceDual A K (1 : Submodule B‚ÇÅ L‚ÇÅ) : Set L‚ÇÅ) = span A (Set.range b‚ÇÅ.traceDual) := by
      rw [‚Üê Submodule.traceDual_span_of_basis A (1 : Submodule B‚ÇÅ L‚ÇÅ),
        Submodule.coe_restrictScalars]
      rw [b.localizationLocalization_span K A‚Å∞ L‚ÇÅ]
      ext; simp
    rw [this, ‚Üê IsScalarTower.coe_toAlgHom' A L‚ÇÅ M, ‚Üê map_coe, map_span, span_span_of_tower]
    rw [IsScalarTower.coe_toAlgHom', ‚Üê Set.range_comp]
    have h‚ÇÇ' : L‚ÇÅ.toSubalgebra ‚äî L‚ÇÇ.toSubalgebra = ‚ä§ := by
      simpa [sup_toSubalgebra_of_isAlgebraic_right] using congr_arg toSubalgebra h‚ÇÇ
    have : algebraMap L‚ÇÅ M ‚àò b‚ÇÅ.traceDual = (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual := by
      rw [eq_comm, Basis.traceDual_eq_iff]
      intro i j
      simp only [Function.comp_apply, basisOfBasisRight_apply, traceForm_apply]
      rw [‚Üê map_mul, h‚ÇÅ.symm.trace_algebraMap_eq (by rwa [sup_comm])]
      rw [b‚ÇÅ.trace_traceDual_mul i j, MonoidWithZeroHom.map_ite_one_zero]
    rw [this]
    have := Submodule.traceDual_span_of_basis (A := B‚ÇÇ) (K := L‚ÇÇ) (B := C) (L := M)
      (I := span C (Set.range (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual)) (Œπ := Œπ)
      (h‚ÇÅ.basisOfBasisRight h‚ÇÇ' b‚ÇÅ).traceDual ?_
    ¬∑ rw [this]
      congr
      simp
      congr!
      ext
      simp
      sorry
    ¬∑ ext
      simp
      sorry
    ¬∑ simp
    ¬∑ sorry
  ¬∑ ext
    simp [mem_one_iff]
